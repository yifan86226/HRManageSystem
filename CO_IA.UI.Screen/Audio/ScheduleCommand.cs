using AT_BC.Data;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.ServiceModel;
using System.Text;
using System.Threading;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

namespace CO_IA.UI.Screen
{
    //------------------------------------------------------------------------------
    // <auto-generated>
    //     此代码由工具生成。
    //     运行时版本:4.0.30319.36392
    //
    //     对此文件的更改可能会导致不正确的行为，并且如果
    //     重新生成代码，这些更改将会丢失。
    // </auto-generated>
    //------------------------------------------------------------------------------
    // 
    // 此源代码由 wsdl 自动生成, Version=4.0.30319.17929。
    // 
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name = "CommandImpServiceSoapBinding", Namespace = "http://cxf.yx.com/")]
    public partial class CommandImpService : System.Web.Services.Protocols.SoapHttpClientProtocol
    {
        private System.Threading.SendOrPostCallback exeOperationCompleted;

        /// <remarks/>
        public CommandImpService(string commandUri)
        {
            this.Url = commandUri;// "http://localhost:8080/schProduct/command/Command";
        }

        /// <remarks/>
        public event exeCompletedEventHandler exeCompleted;

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace = "http://cxf.yx.com/", ResponseNamespace = "http://cxf.yx.com/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string exe([System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string commands)
        {
            object[] results = this.Invoke("exe", new object[] {
                    commands});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult Beginexe(string commands, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("exe", new object[] {
                    commands}, callback, asyncState);
        }

        /// <remarks/>
        public string Endexe(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void exeAsync(string commands)
        {
            this.exeAsync(commands, null);
        }

        /// <remarks/>
        public void exeAsync(string commands, object userState)
        {
            if ((this.exeOperationCompleted == null))
            {
                this.exeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnexeOperationCompleted);
            }
            this.InvokeAsync("exe", new object[] {
                    commands}, this.exeOperationCompleted, userState);
        }

        private void OnexeOperationCompleted(object arg)
        {
            if ((this.exeCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.exeCompleted(this, new exeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")]
    public delegate void exeCompletedEventHandler(object sender, exeCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class exeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal exeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    public static class ScheduleCommandAgent
    {
        public static string ServiceUrl;
        private static CommandImpService CreateCommandService()
        {
            if (string.IsNullOrWhiteSpace(ServiceUrl))
            {
                throw new Exception("必须先初始化通信调度服务地址");
            }
            //使用生成代码调用应该是无参构造,然后修改Url,不确定是否来得及,需测试
            //CommandImpService service = CommandImpService();
            //service.Url = "";

            //下列代码需要修改生成的代码
            return new CommandImpService(ServiceUrl);
        }

        public static bool Call(string telLeft, string callTel)
        {
            ScheduleCommandArgList argList = new ScheduleCommandArgList();
            argList.Add("SERVIE_TEL_LEFT", telLeft);
            argList.Add("SELECTTEL", callTel);
            return ExecuteService("a_call_left", argList);
        }

        public static void CallAsync(string telLeft, string callTel, CompleteScheduleCommand callback)
        {
            ScheduleCommandArgList argList = new ScheduleCommandArgList();
            argList.Add("SERVIE_TEL_LEFT", telLeft);
            argList.Add("SELECTTEL", callTel);
            ExecuteServiceAsync("a_call_left", argList, callback);
        }

        private static void ExecuteServiceAsync(string commandName, ScheduleCommandArgList listArg, CompleteScheduleCommand callback, bool langIsEn = false)
        {
            CommandImpService service = CreateCommandService();
            service.exeCompleted += (object sender, exeCompletedEventArgs e) =>
            {
                if (e.Error != null)
                {
                    System.Windows.MessageBox.Show(e.Error.Message, "执行命令错误");
                }
                else if (e.Cancelled)
                {
                    System.Windows.MessageBox.Show("命令被取消!");
                }
                else if (!string.IsNullOrWhiteSpace(e.Result))
                {
                    if (callback != null)
                    {
                        callback("true".Equals(e.Result, StringComparison.OrdinalIgnoreCase));
                    }
                }
            };
            service.exeAsync(GetCommandArgs(commandName, listArg, langIsEn));
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="listArg"></param>
        /// <returns></returns>
        private static bool ExecuteService(string commandName, ScheduleCommandArgList listArg, bool langIsEn = false)//参数不考虑顺序可以使用Dictionary
        {
            CommandImpService service = CreateCommandService();
            string result=service.exe(GetCommandArgs(commandName,listArg,langIsEn));
            return "true".Equals(result, StringComparison.OrdinalIgnoreCase);
        }

        private static string GetCommandArgs(string commandName, ScheduleCommandArgList listArg, bool langIsEn = false)
        {
            StringBuilder builder = new StringBuilder();
            builder.AppendFormat("&command_id={0}", commandName);
            foreach (var arg in listArg)
            {
                builder.AppendFormat("&{0}={1}", arg.Name, arg.Value);
            }
            builder.AppendFormat("&languageType={0}", langIsEn ? "en" : "zh_CH");
            return builder.ToString();
        }
        private class ScheduleCommandArgList : List<NameValuePair<string>>
        {
            public void Add(string name, string value)
            {
                this.Add(new NameValuePair<string> { Name = name, Value = value });
            }
        }
    }

    public delegate void CompleteScheduleCommand(bool IsSuccessful);
}
