<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PT_TK.Portable</name>
    </assembly>
    <members>
        <member name="T:PT.DB.Portable.DBFieldTypeEnum">
            <summary>
            字段数据类型枚举
            </summary>
        </member>
        <member name="F:PT.DB.Portable.DBFieldTypeEnum.Default">
            <summary>
            默认类型，用于类型指派
            </summary>
        </member>
        <member name="F:PT.DB.Portable.DBFieldTypeEnum.Short">
            <summary>
            short,int 16
            </summary>
        </member>
        <member name="F:PT.DB.Portable.DBFieldTypeEnum.INT32">
            <summary>
            int 32
            </summary>
        </member>
        <member name="F:PT.DB.Portable.DBFieldTypeEnum.NullableINT32">
            <summary>
            INT32?
            </summary>
        </member>
        <member name="F:PT.DB.Portable.DBFieldTypeEnum.INT64">
            <summary>
            int 64
            </summary>
        </member>
        <member name="F:PT.DB.Portable.DBFieldTypeEnum.DateTime">
            <summary>
            datetime
            </summary>
        </member>
        <member name="F:PT.DB.Portable.DBFieldTypeEnum.NullableDateTime">
            <summary>
            DateTime?
            </summary>
        </member>
        <member name="F:PT.DB.Portable.DBFieldTypeEnum.Double">
            <summary>
            double
            </summary>
        </member>
        <member name="F:PT.DB.Portable.DBFieldTypeEnum.NullableDouble">
            <summary>
            Double?
            </summary>
        </member>
        <member name="F:PT.DB.Portable.DBFieldTypeEnum.String">
            <summary>
            string,从数据库回填数据时如果为DBNull,对应成员值设置为""
            </summary>
        </member>
        <member name="F:PT.DB.Portable.DBFieldTypeEnum.NullableString">
            <summary>
            string,从数据库回填数据时如果为DBNull,对应成员值设置为null
            </summary>
        </member>
        <member name="F:PT.DB.Portable.DBFieldTypeEnum.Enum">
            <summary>
            Enum 此类型对应数据库字段为整数
            </summary>
        </member>
        <member name="F:PT.DB.Portable.DBFieldTypeEnum.Bool">
            <summary>
            Bool 此类型对应数据库字段为整数的0(false)或1(true)
            </summary>
        </member>
        <member name="F:PT.DB.Portable.DBFieldTypeEnum.ByteArray">
            <summary>
            blob
            </summary>
        </member>
        <member name="F:PT.DB.Portable.DBFieldTypeEnum.Clob">
            <summary>
            Oracle的CLOB类型
            </summary>
        </member>
        <member name="F:PT.DB.Portable.DBFieldTypeEnum.Cursor">
            <summary>
            cursor,为调用存储过程准备
            </summary>
        </member>
        <member name="T:PT.DB.Portable.DBHelper">
            <summary>
            数据库访问扩展支持类
            </summary>
        </member>
        <member name="M:PT.DB.Portable.DBHelper.GetSQLiteConnectString(System.String,System.String,System.Boolean)">
            <summary>
            获得SQLite连接串
            </summary>
            <param name="fileName">文件名</param>
            <param name="password">密码</param>
            <param name="isReadonly">是否以只读方式打开</param>
            <returns>连接串</returns>
        </member>
        <member name="M:PT.DB.Portable.DBHelper.GetOracleDevartConnectString(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            获得Oracle直连模式下Devart组件的连接串
            </summary>
            <param name="ip">数据库服务器的ip</param>
            <param name="port">数据库服务器的port</param>
            <param name="serviceName">数据库的服务名，此名称是安装oracle的服务名</param>
            <param name="userName">用户名</param>
            <param name="password">密码</param>
            <returns>Oracle直连模式下的连接串</returns>
        </member>
        <member name="M:PT.DB.Portable.DBHelper.GetOracleDirectConnectString(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            获得Oracle直连模式下的连接串
            </summary>
            <param name="ip">数据库服务器的ip</param>
            <param name="port">数据库服务器的port</param>
            <param name="serviceName">数据库的服务名，此名称是安装oracle的服务名</param>
            <param name="userName">用户名</param>
            <param name="password">密码</param>
            <returns>Oracle直连模式下的连接串</returns>
        </member>
        <member name="M:PT.DB.Portable.DBHelper.GetOracleAliasConnectString(System.String,System.String,System.String)">
            <summary>
            获得Oracle别名连接模式下的连接串
            </summary>
            <param name="aliasName">数据库别名，即通过netconfig等工具配置的本地服务名</param>
            <param name="userName">用户名</param>
            <param name="password">密码</param>
            <returns>Oracle别名连接模式下的连接串</returns>
        </member>
        <member name="M:PT.DB.Portable.DBHelper.QuoteString(System.String,System.Boolean)">
            <summary>
            把一个字符串转换为符合sql插入规则的字符串，如a'bcd  => 'a''bcd'
            </summary>
            <param name="s">输入字符串</param>
            <param name="bEmptyStringConvertToNull">输入字符串如果是空串是否构造成NULL串</param>
            <returns>格式后的字符串</returns>
        </member>
        <member name="M:PT.DB.Portable.DBHelper.QuoteStringWithEqualSybmol(System.String,System.Boolean)">
            <summary>
            把一个字符串转换为符合sql插入规则的字符串，如a'bcd  => 'a''bcd',并且自动加上相等判断符号，如果为NULL则加上IS
            </summary>
            <param name="s">输入字符串</param>
            <param name="bEmptyStringConvertToNull">输入字符串如果是空串是否构造成NULL串</param>
            <returns></returns>
        </member>
        <member name="M:PT.DB.Portable.DBHelper.MakeOracleDateStr(System.DateTime)">
            <summary>
            形成符合oracle-sql语句格式的时间字符串
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:PT.DB.Portable.DBHelper.MakeAccessDateStr(System.DateTime)">
            <summary>
            形成符合Access语句格式的时间字符串
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="T:PT.DB.Portable.OracleConnectionConfig">
            <summary>
            oracle连数据库参数配置类
            </summary>
        </member>
        <member name="F:PT.DB.Portable.OracleConnectionConfig.MaxConnectionsDefault">
            <summary>
            IdleTimeout默认值(秒)
            </summary>
        </member>
        <member name="F:PT.DB.Portable.OracleConnectionConfig.IdleTimeoutDefault">
            <summary>
            IdleTimeout默认值(秒)
            </summary>
        </member>
        <member name="F:PT.DB.Portable.OracleConnectionConfig.IdleTimeoutMin">
            <summary>
            IdleTimeout最小值(秒)
            </summary>
        </member>
        <member name="F:PT.DB.Portable.OracleConnectionConfig.ResidentConnectionsDefault">
            <summary>
            ResidentConnections默认值
            </summary>
        </member>
        <member name="F:PT.DB.Portable.OracleConnectionConfig.ResidentIdleTimeoutDefault">
            <summary>
            ResidentIdleTimeout默认值,单位:秒
            </summary>
        </member>
        <member name="F:PT.DB.Portable.OracleConnectionConfig.ResidentIdleTimeoutMin">
            <summary>
            IdleTimeout最小值(秒)
            </summary>
        </member>
        <member name="F:PT.DB.Portable.OracleConnectionConfig.ConnectorType">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="F:PT.DB.Portable.OracleConnectionConfig.IP">
            <summary>
            数据库地址
            </summary>
        </member>
        <member name="F:PT.DB.Portable.OracleConnectionConfig.Port">
            <summary>
            数据库端口
            </summary>
        </member>
        <member name="F:PT.DB.Portable.OracleConnectionConfig.ServiceName">
            <summary>
            数据库服务名,SQLite库存放文件名
            </summary>
        </member>
        <member name="F:PT.DB.Portable.OracleConnectionConfig.UserName">
            <summary>
            数据库用户名
            </summary>
        </member>
        <member name="F:PT.DB.Portable.OracleConnectionConfig.Password">
            <summary>
            数据库密码
            </summary>
        </member>
        <member name="F:PT.DB.Portable.OracleConnectionConfig._MaxConnections">
            <summary>
            MaxConnections属性对应成员
            </summary>
        </member>
        <member name="F:PT.DB.Portable.OracleConnectionConfig._IdleTimeout">
            <summary>
            IdleTimeout属性对应成员
            </summary>
        </member>
        <member name="F:PT.DB.Portable.OracleConnectionConfig._ResidentConnections">
            <summary>
            ResidentConnections
            </summary>
        </member>
        <member name="F:PT.DB.Portable.OracleConnectionConfig._ResidentIdleTimeout">
            <summary>
            ResidentIdleTimeout属性对应成员
            </summary>
        </member>
        <member name="M:PT.DB.Portable.OracleConnectionConfig.CopyFrom(PT.DB.Portable.OracleConnectionConfig,System.Boolean)">
            <summary>
            从其它实例拷贝数据
            </summary>
            <param name="cfg">其它实例</param>
            <param name="bCopyUserNameAndPass">是否拷贝用户名和密码</param>
        </member>
        <member name="M:PT.DB.Portable.OracleConnectionConfig.MembersEqual(PT.DB.Portable.OracleConnectionConfig)">
            <summary>
            判断是否指向同一数据库的同一用户
            </summary>
            <param name="cfg">其它实例</param>
            <returns>是否指向同一数据库的同一用户</returns>
        </member>
        <member name="M:PT.DB.Portable.OracleConnectionConfig.FromDataSection(PT.Toolkit.Portable.DataSection,System.Boolean)">
            <summary>
            从公共数据段读取oracle直连配置
            </summary>
            <param name="pdsConfig">公共数据段</param>
            <param name="bReadPass">是否从公共数据段中读密码</param>
        </member>
        <member name="M:PT.DB.Portable.OracleConnectionConfig.ToDataSection(PT.Toolkit.Portable.DataSection,System.Boolean)">
            <summary>
            数据连接配置写如公共数据段
            </summary>
            <param name="pdsConfig">公共数据段</param>
            <param name="bWritePass">是否向公共数据段中写密码</param>
        </member>
        <member name="M:PT.DB.Portable.OracleConnectionConfig.ToString">
            <summary>
            重写ToString()
            </summary>
            <returns></returns>
        </member>
        <member name="P:PT.DB.Portable.OracleConnectionConfig.MaxConnections">
            <summary>
            最大连接数,默认值:700,取值范围: 无限
            </summary>
        </member>
        <member name="P:PT.DB.Portable.OracleConnectionConfig.IdleTimeout">
            <summary>
            闲置生命周期，自最近一次被ReleaseDBOperator调用开始计算,单位:秒,默认值:IdleTimeoutDefault
            </summary>
        </member>
        <member name="P:PT.DB.Portable.OracleConnectionConfig.ResidentConnections">
            <summary>
            常驻连接数,池管理提供常驻连接不进行释放操作,提高访问效率,默认值:ResidentConnectionsDefault
            </summary>
        </member>
        <member name="P:PT.DB.Portable.OracleConnectionConfig.ResidentIdleTimeout">
            <summary>
            常驻连接闲置生命周期，自最近一次被ReleaseDBOperator调用开始计算,单位:秒,默认值:ResidentIdleTimeoutDefault
            </summary>
        </member>
        <member name="T:PT.DB.Portable.TableFieldMap">
            <summary>
            数据库字段与类成员映射属性,映射后该成员与数据库的交互访问可通过TP.DB.DBMapper类进行映射操作
            </summary>
        </member>
        <member name="F:PT.DB.Portable.TableFieldMap.PrimaryKey">
            <summary>
            映射成员字段是否为表单主键,默认值:false
            </summary>
        </member>
        <member name="F:PT.DB.Portable.TableFieldMap.DBFieldName">
            <summary>
            对应数据库字段名称,空串(默认值)表示字段名称和类成员名称相同
            </summary>
        </member>
        <member name="F:PT.DB.Portable.TableFieldMap.ForceQuoteName">
            <summary>
            数据库操作时列名需要强制双引号,默认值:false
            </summary>
        </member>
        <member name="F:PT.DB.Portable.TableFieldMap.RealDBFieldType">
            <summary>
            对于一个c#类型，指定实际对应数据库字段类型
            </summary>
        </member>
        <member name="M:PT.DB.Portable.TableFieldMap.#ctor">
            <summary>
            无参数构造
            </summary>
        </member>
        <member name="M:PT.DB.Portable.TableFieldMap.FindInAttributes(System.Object[])">
            <summary>
            尝试获得或从同名属性创建字段映射,用在某些特殊应用环境下,可能存在类型一致的此类
            </summary>
            <param name="atts"></param>
            <returns></returns>
        </member>
        <member name="T:PT.DB.Portable.TableMap">
            <summary>
            数据库表与类映射属性,映射后该类的成员与数据库的交互访问可通过TP.DB.DBMapper类进行映射操作
            </summary>
        </member>
        <member name="F:PT.DB.Portable.TableMap.ForceQuoteName">
            <summary>
            数据库操作时表名需要强制双引号
            </summary>
        </member>
        <member name="F:PT.DB.Portable.TableMap.TableName">
            <summary>
            对应数据库表名称，为空串（默认值）时表示类名与数据库表同名
            </summary>
        </member>
        <member name="M:PT.DB.Portable.TableMap.#ctor">
            <summary>
            无参数构造
            </summary>
        </member>
        <member name="M:PT.DB.Portable.TableMap.FindInAttributes(System.Object[])">
            <summary>
            尝试获得或从同名属性创建表映射信息,用在某些特殊应用环境下,可能存在类型一致的此类
            </summary>
            <param name="atts"></param>
            <returns></returns>
        </member>
        <member name="T:PT.DB.Portable.ConnectorTypeEnum">
            <summary>
            数据库连接组件类型枚举
            </summary>
        </member>
        <member name="F:PT.DB.Portable.ConnectorTypeEnum.OracleDotNet">
            <summary>
            Oracle-System.Data.OracleClient
            </summary>
        </member>
        <member name="F:PT.DB.Portable.ConnectorTypeEnum.OracleDevart">
            <summary>
            Oracle-Devart.Data.Oracle
            </summary>
        </member>
        <member name="F:PT.DB.Portable.ConnectorTypeEnum.SQLite">
            <summary>
            SQLite
            </summary>
        </member>
        <member name="T:PT.DB.Portable.ConnectorTypeEnumConverter">
            <summary>
            提供对ConnectorTypeEnum的类型和别名之间的转换
            </summary>
        </member>
        <member name="M:PT.DB.Portable.ConnectorTypeEnumConverter.EnumToString(PT.DB.Portable.ConnectorTypeEnum)">
            <summary>
            枚举转成别名
            </summary>
            <param name="connectorType">ConnectorTypeEnum</param>
            <returns>别名</returns>
        </member>
        <member name="M:PT.DB.Portable.ConnectorTypeEnumConverter.EnumFromString(System.String)">
            <summary>
            别名转成枚举
            </summary>
            <param name="s">别名</param>
            <returns>ConnectorTypeEnum</returns>
        </member>
        <member name="T:PT.Toolkit.Portable.DataSection">
            <summary>
            公共文件格式数据段
            </summary>
            <summary>
            公共文件格式数据段
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.DataSection.STOPREFLECTATSYSTEMNAMESPACE">
            <summary>
            碰到类的命名空间以"System."开头，是否停止继续解析子类
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.DataSection.FromObject(PT.Toolkit.Portable.DataSection,System.Object,PT.Toolkit.Portable.DataSectionFromObjectArgs)">
            <summary>
            将对象及成员以树型层次构建到DataSection中,不能在重写object.Tostring时使用,第归调用会使堆栈溢出
            </summary>
            <param name="dataSection">DataSection</param>
            <param name="o">object</param>
            <param name="args">解析策略，为null时使用默认值</param>
        </member>
        <member name="M:PT.Toolkit.Portable.DataSection.GetNextReflectObjectByName(System.Collections.Generic.List{System.Object},System.String)">
            <summary>
            按顺序检索出当前名称对象的下一个反射对象
            </summary>
            <param name="l"></param>
            <param name="currentObjectName"></param>
            <returns></returns>
        </member>
        <member name="M:PT.Toolkit.Portable.DataSection.IsEndDataType(System.Object)">
            <summary>
            判断对象是否是终极类型
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:PT.Toolkit.Portable.DataSection.StaticGetFormatedStringFromObject(System.Object,PT.Toolkit.Portable.DataSectionFromObjectArgs,PT.Toolkit.Portable.DataSectionFormatArgs)">
            <summary>
            将对象实例转换为DataSection的友好的树型格式的字符串
            </summary>
            <param name="o">对象实例</param>
            <param name="analysisArgs">类成员解析策略</param>
            <param name="formatArgs">格式化输出策略</param>
            <returns>格式化显示的类信息</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.DataSection.StaticGetFormatedStringFromObject(System.Object)">
            <summary>
            使用默认的解析配置和输出配置，将对象实例转换为DataSection的友好的树型格式的字符串
            </summary>
            <param name="o">对象实例</param>
            <returns>格式化显示的类信息</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.DataSection.GetStringLimitAtLength(System.String,System.Int32)">
            <summary>
            如果字符串超过指定长度则截取
            </summary>
            <param name="originalString">原始字符串</param>
            <param name="maxLen">长度限制</param>
            <returns></returns>
        </member>
        <member name="F:PT.Toolkit.Portable.DataSection.SubSections">
            <summary>
            子数据段集合
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.DataSection.Params">
            <summary>
            数据段中的数据项集合
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.DataSection.SectionName">
            <summary>
            数据段名称
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.DataSection.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.DataSection.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="sectionName">指定数据段名称</param>
        </member>
        <member name="M:PT.Toolkit.Portable.DataSection.Clear">
            <summary>
            清除所有数据
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.DataSection.CopyFrom(PT.Toolkit.Portable.DataSection)">
            <summary>
            从其它实例拷贝数据
            </summary>
            <param name="dataSection">其它实例</param>
        </member>
        <member name="M:PT.Toolkit.Portable.DataSection.FindSubSectionByName(System.String,System.Boolean)">
            <summary>
            根据名称查找子数据段
            </summary>
            <param name="sectionName">子数据段名称</param>
            <param name="isCaseSensitive">是否大小写敏感</param>
            <returns>子数据段</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.DataSection.FindParamByName(System.String,System.Boolean)">
            <summary>
            根据名称查找数据项
            </summary>
            <param name="paramName"></param>
            <param name="isCaseSensitive">是否大小写敏感</param>
            <returns>数据项</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.DataSection.GetParamValueByName(System.String,System.Boolean)">
            <summary>
            根据名称取得参数项的存储值
            </summary>
            <param name="paramName">名称</param>
            <param name="isCaseSensitive">是否大小写敏感</param>
            <returns>存储值</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.DataSection.GetParamValueByNameIfExist(System.String,System.String@,System.Boolean)">
            <summary>
            当字典对象存在时候根据名称取得数据项的存储值并填写到输出变量中
            </summary>
            <param name="paramName">字典名称</param>
            <param name="paramValue">输出参数</param>
            <param name="isCaseSensitive">是否大小写敏感</param>
        </member>
        <member name="M:PT.Toolkit.Portable.DataSection.GetParamValueByNameIfNotEmpty(System.String,System.String@,System.Boolean)">
            <summary>
            当字典对象的值不为空时候根据名称取得数据项的存储值并填写到输出变量中
            </summary>
            <param name="paramName">字典名称</param>
            <param name="paramValue">输出参数</param>
            <param name="isCaseSensitive">是否大小写敏感</param>
        </member>
        <member name="M:PT.Toolkit.Portable.DataSection.ContentToString">
            <summary>
            将内容输出为字符串格式
            </summary>
            <returns></returns>
        </member>
        <member name="M:PT.Toolkit.Portable.DataSection.ToString">
            <summary>
            内容转化为字符串
            </summary>
            <returns>内容转化为字符串</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.DataSection.GetFormatedString(PT.Toolkit.Portable.DataSectionFormatArgs)">
            <summary>
            将整个实例中的数据生成友好的树型格式的字符串
            </summary>
            <param name="formatArgs">格式化参数</param>
            <returns>格式字符串</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.DataSection.EnsureGetSubSectionByName(System.String,System.Boolean)">
            <summary>
            以'\'为分割符,逐级创建子段并返回子段,如果子段已存在则不创建
            </summary>
            <param name="sectionPathName">路径名称</param>
            <param name="isCaseSensitive">是否大小写敏感</param>
            <returns>DataSection</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.DataSection.EnsureGetSubSectionByName(System.String[],System.Int32,System.Boolean)">
            <summary>
            根据名称数组,逐级创建子段并返回子段,如果子段已存在则不创建
            </summary>
            <param name="pathNameArray">路径名称数组</param>
            <param name="arrayIndex">针对当前列表,名称数组的索引位置</param>
            <param name="isCaseSensitive">是否大小写敏感</param>
            <returns>DataSection</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.DataSection.ExistsDeadlyLoop">
            <summary>
            从当前数据段开始校验，检查子级数据段直到末级，是否存在因为填写失误出现死循环嵌套的情况
            </summary>
            <returns>存在死循环的节点或null</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.DataSection.ExistsDeadlyLoopRecurrence(PT.Toolkit.Portable.DataSectionList,System.Collections.Generic.List{PT.Toolkit.Portable.DataSection})">
            <summary>
            ExistsDeadlyLoop递归子函数
            </summary>
            <param name="subSections">子节点列表</param>
            <param name="deadlyLoopChecks">递归时传递的检查列表</param>
            <returns>存在死循环的节点或null</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.DataSection.LoadFromString(System.String)">
            <summary>
            从大字符串读取数据
            </summary>
            <param name="sLines">字符串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.DataSection.LoadFromStrings(System.String[])">
            <summary>
            从多行字符串读取数据
            </summary>
            <param name="Lines">字符串数组</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.DataSection.LoadFromStringsInternal(System.String[],System.Int32@)">
            <summary>
            从字符串读取数据
            </summary>
            <param name="Lines">字符串数组</param>
            <param name="iLine">行号</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.DataSection.DecodeParam(System.String)">
            <summary>
            解析一行数据成为键值对
            </summary>
            <param name="sLine">行文本</param>
            <returns>字典项或null</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.DataSection.DecodeSectionName(System.String)">
            <summary>
            从标签中解析出section名称
            </summary>
            <param name="sTag">标签</param>
            <returns>section名称</returns>
        </member>
        <member name="T:PT.Toolkit.Portable.Runtime.CompositeValue">
            <summary>
            复合类型值
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Runtime.CompositeValue.ByteArrayValue">
            <summary>
            byte[]值
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Runtime.CompositeValue.DataType">
            <summary>
            变量值类型，根据值类型确定类中哪个数据值有意义
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Runtime.CompositeValue.DateTimeValue">
            <summary>
            DateTime值
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Runtime.CompositeValue.DoubleValue">
            <summary>
            double值
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Runtime.CompositeValue.Int32Value">
            <summary>
            Int32值
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Runtime.CompositeValue.Int64Value">
            <summary>
            Int64值
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Runtime.CompositeValue.StringValue">
            <summary>
            string值
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Runtime.CompositeValue.BoolValue">
            <summary>
            bool值
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Runtime.CompositeValue.LogOutputOptionValue">
            <summary>
            LogOutputOptionEnum值
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.Runtime.CompositeValue.WiseCopyFrom(PT.Toolkit.Portable.Runtime.CompositeValue)">
            <summary>
            值类型匹配时拷贝其它实例值
            </summary>
            <param name="dummy">其它实例</param>
        </member>
        <member name="M:PT.Toolkit.Portable.Runtime.CompositeValue.CopyFrom(PT.Toolkit.Portable.Runtime.CompositeValue)">
            <summary>
            从其它实例复制数据
            </summary>
            <param name="dummy">其它实例</param>
        </member>
        <member name="M:PT.Toolkit.Portable.Runtime.CompositeValue.ToString">
            <summary>
            根据类型将对应值以字符串形式返回
            </summary>
            <returns>字符串形式的值</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Runtime.CompositeValue.CheckItemsFromString(System.String)">
            <summary>
            从DataSection格式的字符串装载BaseVisualItemList列表项
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Runtime.CompositeValue.CheckItemsToString(PT.Toolkit.Portable.UI.BaseVisualItemList)">
            <summary>
            BaseVisualItemList列表项转换为DataSection格式的字符串
            </summary>
            <param name="visualItems">BaseVisualItemList</param>
            <returns>字符串</returns>
        </member>
        <member name="P:PT.Toolkit.Portable.Runtime.CompositeValue.Value">
            <summary>
            类型对应的实际值
            </summary>
        </member>
        <member name="P:PT.Toolkit.Portable.Runtime.CompositeValue.LogOutputOptionValueProp">
            <summary>
            针对LogOutputOptionValue进行访问,访问时匹配DataType,否则返回默认值
            </summary>
        </member>
        <member name="P:PT.Toolkit.Portable.Runtime.CompositeValue.BoolValueProp">
            <summary>
            针对BoolValue进行访问,访问时匹配DataType,否则返回默认值
            </summary>
        </member>
        <member name="P:PT.Toolkit.Portable.Runtime.CompositeValue.ByteArrayValueProp">
            <summary>
            针对ByteArrayValue进行访问,访问时匹配DataType,否则返回默认值
            </summary>
        </member>
        <member name="P:PT.Toolkit.Portable.Runtime.CompositeValue.DoubleValueProp">
            <summary>
            针对DoubleValue进行访问,访问时匹配DataType,否则返回默认值
            </summary>
        </member>
        <member name="P:PT.Toolkit.Portable.Runtime.CompositeValue.DateTimeValueProp">
            <summary>
            针对DateTimeValue进行访问,访问时匹配DataType,否则返回默认值
            </summary>
        </member>
        <member name="P:PT.Toolkit.Portable.Runtime.CompositeValue.Int32ValueProp">
            <summary>
            针对Int32Value进行访问,访问时匹配DataType,否则返回默认值
            </summary>
        </member>
        <member name="P:PT.Toolkit.Portable.Runtime.CompositeValue.Int64ValueProp">
            <summary>
            针对Int64Value进行访问,访问时匹配DataType,否则返回默认值
            </summary>
        </member>
        <member name="P:PT.Toolkit.Portable.Runtime.CompositeValue.StringValueProp">
            <summary>
            针对StringValue进行访问,访问时匹配DataType,否则返回默认值
            </summary>
        </member>
        <member name="T:PT.Toolkit.Portable.Runtime.CompositeValueTypeEnum">
            <summary>
            动态参数数据类型枚举
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Runtime.CompositeValueTypeEnum.ByteArray">
            <summary>
            1 二进制数组 Binary
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Runtime.CompositeValueTypeEnum.DateTime">
            <summary>
            2 DateTime  Timer
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Runtime.CompositeValueTypeEnum.Double">
            <summary>
            3 双精度浮点 Double
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Runtime.CompositeValueTypeEnum.Int32">
            <summary>
            4 Int32 
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Runtime.CompositeValueTypeEnum.Int64">
            <summary>
            5 Int64
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Runtime.CompositeValueTypeEnum.String">
            <summary>
            6 字符串 String
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Runtime.CompositeValueTypeEnum.Bool">
            <summary>
            7 bool
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Runtime.CompositeValueTypeEnum.LogOutputOption">
            <summary>
            8 LogOutputOption 
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Runtime.CompositeValueTypeEnum.CheckList">
            <summary>
            9 CheckList 多选列表,使用stringvalue存储DataSection的格式字符,包括Items,Ids,Checks三个段
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Runtime.CompositeValueTypeEnum.MultiLineString">
            <summary>
            10 多行文本编辑对话框
            </summary>
        </member>
        <member name="T:PT.Toolkit.Portable.Runtime.CompositeValueTypeEnumConverter">
            <summary>
            提供对CompositeValueTypeEnum的类型和别名之间的转换
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.Runtime.CompositeValueTypeEnumConverter.EnumToString(PT.Toolkit.Portable.Runtime.CompositeValueTypeEnum)">
            <summary>
            枚举转成别名
            </summary>
            <param name="valueType">srmParamTypeEnum</param>
            <returns>别名</returns>
        </member>
        <member name="T:PT.Toolkit.Portable.Runtime.EditableCompositeValue">
            <summary>
            带编辑属性的复合类型值
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Runtime.EditableCompositeValue.Seq">
            <summary>
            参数顺序,用于控制在调用界面上的显示顺序
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Runtime.EditableCompositeValue.Name">
            <summary>
            参数名称
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Runtime.EditableCompositeValue.CanDropDownEdit">
            <summary>
            参数值下拉框是否可编辑,默认值:false
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Runtime.EditableCompositeValue.AlternateValues">
            <summary>
            参数可选值，在控制台界面解析成下拉值使用,对bool,datetime,byte[]无效
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Runtime.EditableCompositeValue.Descriptions">
            <summary>
            参数说明
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Runtime.EditableCompositeValue.Helpers">
            <summary>
            帮助Id集合,特殊地"|"符号代指分割线，"|"后可连接非正整数，如 '|0'代表在当前级别增加分割线,'|-1'代表在当前级别的上层级别增加分割线
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.Runtime.EditableCompositeValue.CopyFrom(PT.Toolkit.Portable.Runtime.EditableCompositeValue)">
            <summary>
            从其它实例复制数据
            </summary>
            <param name="dummy"></param>
        </member>
        <member name="M:PT.Toolkit.Portable.Runtime.EditableCompositeValue.ToValueString">
            <summary>
            根据类型将对应值以字符串形式返回(不包含参数名)
            </summary>
            <returns>字符串形式的值</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Runtime.EditableCompositeValue.ToString">
            <summary>
            根据类型将对应值以字符串形式返回
            </summary>
            <returns>字符串形式的值</returns>
        </member>
        <member name="T:PT.Toolkit.Portable.Runtime.HelperOutputModeEnum">
            <summary>
            帮助输出到界面时模式枚举
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Runtime.HelperOutputModeEnum.OverWrite">
            <summary>
            0 覆盖
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Runtime.HelperOutputModeEnum.Append">
            <summary>
            1:追加 
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Runtime.HelperOutputModeEnum.AppendWithSpace">
            <summary>
            2:追加，如果目标位置的文本非空，则先加空格再追加
            </summary>
        </member>
        <member name="T:PT.Toolkit.Portable.Runtime.HelperOutputTargetEnum">
            <summary>
            帮助文本输出位置枚举
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Runtime.HelperOutputTargetEnum.Cell">
            <summary>
            0:变量或参数输入框 
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Runtime.HelperOutputTargetEnum.Result">
            <summary>
            1:结果框 
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Runtime.HelperOutputTargetEnum.PopWindow">
            <summary>
            2:弹出窗口显示
            </summary>
        </member>
        <member name="T:PT.Toolkit.Portable.Runtime.LogOutputOptionEnum">
            <summary>
            日志输出方式枚举
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Runtime.LogOutputOptionEnum.None">
            <summary>
            0 不输出
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Runtime.LogOutputOptionEnum.File">
            <summary>
            1 文件
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Runtime.LogOutputOptionEnum.LogService">
            <summary>
            2 日志服务
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Runtime.LogOutputOptionEnum.Console">
            <summary>
            3 控制台
            </summary>
        </member>
        <member name="T:PT.Toolkit.Portable.Runtime.LogOutputOptionEnumConverter">
            <summary>
            提供对CompositeValueTypeEnum的类型和别名之间的转换
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.Runtime.LogOutputOptionEnumConverter.EnumToString(PT.Toolkit.Portable.Runtime.LogOutputOptionEnum)">
            <summary>
            枚举转成别名
            </summary>
            <param name="outputOption">LogOutputOptionEnum</param>
            <returns>别名</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Runtime.LogOutputOptionEnumConverter.EnumFromString(System.String)">
            <summary>
            别名转成枚举
            </summary>
            <param name="s">别名</param>
            <returns>LogOutputOptionEnum</returns>
        </member>
        <member name="T:PT.Toolkit.Portable.Runtime.RuntimeLogType">
            <summary>
            运行时日志类型
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Runtime.RuntimeLogType.Debug">
            <summary>
            0 调试信息
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Runtime.RuntimeLogType.Filing">
            <summary>
            1 备案信息,此类日志不会被清理程序自动删除
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Runtime.RuntimeLogType.Warn">
            <summary>
            2 警告信息
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Runtime.RuntimeLogType.Error">
            <summary>
            3 错误信息
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Runtime.RuntimeLogType.Fatal">
            <summary>
            4 致命错误信息
            </summary>
        </member>
        <member name="T:PT.Toolkit.Portable.Runtime.RuntimeLogTypeList">
            <summary>
            RuntimeLogType列表,提供高级检索
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.Runtime.RuntimeLogTypeList.ToString">
            <summary>
            将包含的类型转换为字符串表示形式，每个类型用逗号分隔
            </summary>
            <returns></returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Runtime.RuntimeLogTypeList.FromString(System.String)">
            <summary>
            从字符串表示形式转换为类型
            </summary>
            <param name="s"></param>
        </member>
        <member name="T:PT.Toolkit.Portable.Runtime.RuntimeLogTypeConverter">
            <summary>
            提供对RuntimeLogType的类型和别名之间的转换
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.Runtime.RuntimeLogTypeConverter.EnumToString(PT.Toolkit.Portable.Runtime.RuntimeLogType)">
            <summary>
            枚举转成别名
            </summary>
            <param name="userStatus">RuntimeLogType</param>
            <returns>别名</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Runtime.RuntimeLogTypeConverter.EnumFromString(System.String)">
            <summary>
            别名转成枚举
            </summary>
            <param name="s">别名</param>
            <returns>RuntimeLogType</returns>
        </member>
        <member name="T:PT.Toolkit.Portable.Runtime.ServerRuntimeHelper">
            <summary>
            运行时帮助文本，用于对运行时函数及参数或运行时变量提供服务帮助信息
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Runtime.ServerRuntimeHelper.HelperId">
            <summary>
            帮助Id，唯一值字符串,HelperId是全局的，即在任何一个元素上定义了一个RuntimeHelper特性，其它运行时对象都可使用此特性
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Runtime.ServerRuntimeHelper.ImageName">
            <summary>
            文本生成菜单时的图像索引，图像由控制台界面提供见样例函数
            也可写作定义该特性的程序集的有效的图像资源路径，例如"res::PT.Service.Properties.Resources.Image1",运行时管理框架在装载时自动解析并写入Image成员中
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Runtime.ServerRuntimeHelper.Image">
            <summary>
            图片信息(如果图片信息是从程序集资源装载时,此值有效)
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Runtime.ServerRuntimeHelper.MenuText">
            <summary>
            文本菜单标题
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Runtime.ServerRuntimeHelper.Text">
            <summary>
            文本内容,也可写作定义该特性的程序集的有效的字符串资源路径，例如"res::PT.Service.Properties.Resources.String1",运行时管理框架在装载时自动解析
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Runtime.ServerRuntimeHelper.ParentMenu">
            <summary>
            文本菜单所属的父菜单，空则为根菜单，可用'\'区分多级
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Runtime.ServerRuntimeHelper.OutputMode">
            <summary>
            文本菜单点击后的文本输出模式,默认为AppendWithSpace
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Runtime.ServerRuntimeHelper.OutputTarget">
            <summary>
            文本菜单点击后的文本输出位置,默认为Result
            </summary>
        </member>
        <member name="T:PT.Toolkit.Portable.Runtime.ServerRuntimeHelperList">
            <summary>
            RuntimeHelper列表
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.Runtime.ServerRuntimeHelperList.FindItemById(System.String)">
            <summary>
            根据Id在数组里查找对应变量
            </summary>
            <param name="helperId">HelperId</param>
            <returns>RuntimeHelper或null</returns>
        </member>
        <member name="T:PT.Toolkit.Portable.Runtime.RuntimeWriteLogDelegate">
            <summary>
            运行时输出委托
            </summary>
            <param name="categoryname">log分类</param>
            <param name="msg">log内容</param>
            <param name="logType">日志类型</param>
            <param name="logOutputOption">输出目标选项</param>
        </member>
        <member name="T:PT.Toolkit.Portable.Runtime.RuntimeLogWriter">
            <summary>
            运行时日志输出类
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Runtime.RuntimeLogWriter._Writelog">
            <summary>
            存储委托句柄
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.Runtime.RuntimeLogWriter.RegisterDelegate(System.Int32,PT.Toolkit.Portable.Runtime.RuntimeWriteLogDelegate)">
            <summary>
            注册日志输出实现委托
            </summary>
            <param name="serialNo"></param>
            <param name="d"></param>
        </member>
        <member name="M:PT.Toolkit.Portable.Runtime.RuntimeLogWriter.WriteLog(System.String,System.String,PT.Toolkit.Portable.Runtime.RuntimeLogType,PT.Toolkit.Portable.Runtime.LogOutputOptionEnum)">
            <summary>
            输出定制日志
            </summary>
            <param name="categoryname">log分类</param>
            <param name="msg">log内容</param>
            <param name="logType">日志类型</param>
            <param name="logOutputOption">输出目标选项</param>
        </member>
        <member name="T:PT.Toolkit.Portable.Runtime.RuntimeMethodInvokeContext">
            <summary>
            运行时管理功能调用入口上下文
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Runtime.RuntimeMethodInvokeContext.InvokeMode">
            <summary>
            调用模式
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Runtime.RuntimeMethodInvokeContext.ChangingParamName">
            <summary>
            当InvokeMode为RefreshWhileBindingParamChanged的,指定变化的参数名称
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Runtime.RuntimeMethodInvokeContext.UpdateParamsAfterInvoke">
            <summary>
            当函数执行完Invoke模式后，是否将当前参数值更新入参数模板，此值可以在Invoke模式运行时函数中改动来控制模板参数内容
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Runtime.RuntimeMethodInvokeContext.MethodParams">
            <summary>
            运行时功能定义的参数列表
            </summary>
        </member>
        <member name="T:PT.Toolkit.Portable.Runtime.RuntimeMethodInvokeModeEnum">
            <summary>
            调用模式枚举
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Runtime.RuntimeMethodInvokeModeEnum.RefreshWhileGettingParams">
            <summary>
            0 动态配置参数值
            当函数参数模型中有参数的属性RefreshWhileGettingParams值为true时，每次控制台刷新函数参数列表，运行时管理将自动调用运行时函数并在函数入口参数中设置此标志
            此时对应参数列表是参数模型引用值，修改后将直接影响参数模型
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Runtime.RuntimeMethodInvokeModeEnum.Invoke">
            <summary>
            1 控制台正常调用函数
            此时对应参数列表是客户端传递的序列化值
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Runtime.RuntimeMethodInvokeModeEnum.RefreshParamsWhileChanged">
            <summary>
            2 参数值关联调用
            此时对应参数列表是参数模型引用值，修改后将直接影响参数模型
            </summary>
        </member>
        <member name="T:PT.Toolkit.Portable.Runtime.RuntimeMethodParamsUpdateContext">
            <summary>
            运行时管理功能参数更改上下文
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Runtime.RuntimeMethodParamsUpdateContext.MethodClass">
            <summary>
            函数分类名称
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Runtime.RuntimeMethodParamsUpdateContext.MethodName">
            <summary>
            函数名称
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Runtime.RuntimeMethodParamsUpdateContext.MethodParams">
            <summary>
            运行时功能定义的参数列表
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Runtime.RuntimeMethodParamsUpdateContext.AddNewParamsWhenNotExists">
            <summary>
            要更新的参数里如果在模型中未定义,是否增加
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Runtime.RuntimeMethodParamsUpdateContext.DeleteOldParamsWhenNotExists">
            <summary>
            模型中参数如果不存在于要更新的参数里,是否删除
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Runtime.RuntimeMethodParamsUpdateContext.UpdateOldParamsWhenExists">
            <summary>
            是否更新的参数值
            </summary>
        </member>
        <member name="T:PT.Toolkit.Portable.Runtime.ServerRuntimeImportType">
            <summary>
            指示需要从其它类型中装载运行时框架对象,该特性必须定义在类上
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Runtime.ServerRuntimeImportType.ImportType">
            <summary>
            包含运行时框架对象的类型
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.Runtime.ServerRuntimeImportType.#ctor(System.Type)">
            <summary>
            构造
            </summary>
            <param name="tp">指示需要从其它类型中装载运行时框架对象</param>
        </member>
        <member name="T:PT.Toolkit.Portable.Runtime.ServerRuntimeMethod">
            <summary>
            运行时函数特性定义,该特性必须定义在类的静态或非静态成员函数上
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Runtime.ServerRuntimeMethod.Seq">
            <summary>
            参数顺序,用于控制在调用界面上的显示顺序
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Runtime.ServerRuntimeMethod.MethodName">
            <summary>
            函数名称
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Runtime.ServerRuntimeMethod.MethodDescription">
            <summary>
            函数说明
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Runtime.ServerRuntimeMethod.MethodClass">
            <summary>
            分类名称在控制台显示,可以使用'\'来划分层次
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Runtime.ServerRuntimeMethod.ConfirmInvoke">
            <summary>
            在函数执行前显示确认执行的信息
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Runtime.ServerRuntimeMethod.Helpers">
            <summary>
            帮助Id集合,特殊地"|"符号代指分割线，"|"后可连接非正整数，如 '|0'代表在当前级别增加分割线,'|-1'代表在当前级别的上层级别增加分割线
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.Runtime.ServerRuntimeMethod.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="T:PT.Toolkit.Portable.Runtime.ServerRuntimeMethodList">
            <summary>
            ServerRuntimeMethod类列表,提供扩展功能访问
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.Runtime.ServerRuntimeMethodList.FindItemByClassNameAndMethodName(System.String,System.String)">
            <summary>
            根据归属类名称和函数名称查找对应函数
            </summary>
            <param name="className">归属类名称</param>
            <param name="methdName">函数名称</param>
            <returns>ServerRuntimeMethod或null</returns>
        </member>
        <member name="T:PT.Toolkit.Portable.Runtime.ServerRuntimeMethodParam">
            <summary>
            运行时函数参数特性，包含多个基本数据类型成员变量，根据值类型标记其哪个成员变量的数值有意义
            ,该特性必须定义在类的静态或非静态成员函数上且与运行时函数特性捆绑定义
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Runtime.ServerRuntimeMethodParam.ConsoleVisible">
            <summary>
            此参数是否在控制台显示,或者隐含传递
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Runtime.ServerRuntimeMethodParam.RefreshWhileGettingParams">
            <summary>
            在刷新参数列表时此参数是否允许定制
            当有参数设置此标记时绑定的函数必须作请求处理分支
            运行时管理会调用一次绑定的函数,函数的入口参数InvokeMode为RefreshWhileGettingParams
            绑定函数在判断CustomMode==true时,做分支处理动态定制参数信息并返回,此时的调用并不是客户端的实际调用,本次返回值无意义
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Runtime.ServerRuntimeMethodParam.RefreshParamsWhileChanged">
            <summary>
            绑定刷新
            指示此参数值在控制台界面改变时，是否需要绑定刷新参数列表，如果为true则运行时函数会被调用，
            调用时入口参数的InvokeMode调用模式为RefreshParamsWhileChanged
            调用时入口参数的BindingParamName为变化的参数名称
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.Runtime.ServerRuntimeMethodParam.CopyFrom(PT.Toolkit.Portable.Runtime.ServerRuntimeMethodParam)">
            <summary>
            从其它实例复制数据
            </summary>
            <param name="dummy"></param>
        </member>
        <member name="T:PT.Toolkit.Portable.Runtime.ServerRuntimeMethodParamList">
            <summary>
            ServerRuntimeMethodParam类列表,提供扩展功能访问
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.Runtime.ServerRuntimeMethodParamList.NeedCustomParams">
            <summary>
            判断是否有参数需要动态定制内容
            </summary>
            <returns></returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Runtime.ServerRuntimeMethodParamList.FindItemByName(System.String)">
            <summary>
            根据参数名称查找项目
            </summary>
            <param name="paramName">参数名称</param>
            <returns>ServerRuntimeMethodEx或null</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Runtime.ServerRuntimeMethodParamList.GetItemValueByName_Bool(System.String,System.Boolean)">
            <summary>
            根据参数名称获取参数的BoolValue,参数不存在或者类型不匹配时将返回默认值
            </summary>
            <param name="paramName">参数名称</param>
            <param name="defaultValue">默认值</param>
            <returns>参数的BoolValue</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Runtime.ServerRuntimeMethodParamList.GetItemValueByName_String(System.String,System.String)">
            <summary>
            根据参数名称获取参数的StringValue,参数不存在或者类型不匹配时将返回默认值
            </summary>
            <param name="paramName">参数名称</param>
            <param name="defaultValue">默认值</param>
            <returns>参数的StringValue</returns>
        </member>
        <member name="T:PT.Toolkit.Portable.Runtime.ServerRuntimeMethodResult">
            <summary>
            运行时函数参数，包含多个基本数据类型成员变量，根据值类型标记其哪个成员变量的数值有意义
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Runtime.ServerRuntimeMethodResult.RefreshParamsAfterInvoke">
            <summary>
            调用后是否要求控制台刷新参数列表
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Runtime.ServerRuntimeMethodResult.RefreshMethodAfterInvoke">
            <summary>
            调用后是否要求控制台刷新函数定义
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Runtime.ServerRuntimeMethodResult.ResultStatus">
            <summary>
            调用是否成功,如果未成功,异常信息写在ExceptionMessage
            结果状态 
            -1 异常，服务端代码未捕获此异常，而运行时管理捕获后将异常信息放入StringValue
            0 执行失败，服务端函数设置为0，错误信息存放于StringValue
            1 执行成功，返回的值根据DataType判断
            2 异步执行状态，服务端函数开单独线程处理，并返回此状态，StringValue存放一个服务器执行进度类Id，可根据此Id查询执行状态
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Runtime.ServerRuntimeMethodResult.SaveAsFileName">
            <summary>
            保存时设置默认文件名
            当返回数据类型为byte[]时，会在控制台显示保存按钮存为文件
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Runtime.ServerRuntimeMethodResult.SaveAsFilter">
            <summary>
            保存文件名时的过滤信息
            当返回数据类型为byte[]时，会在控制台显示保存按钮存为文件
            举例 "文本文件(*.txt)|*.txt|所有文件(*.*)|*.*"
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Runtime.ServerRuntimeMethodResult.SaveAsTitle">
            <summary>
            保存文件对话框标题信息
            当返回数据类型为byte[]时，会在控制台显示保存按钮存为文件
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.Runtime.ServerRuntimeMethodResult.ToValueString">
            <summary>
            根据类型将对应值以字符串形式返回(不包含参数名)
            </summary>
            <returns>字符串形式的值</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Runtime.ServerRuntimeMethodResult.ToString">
            <summary>
            根据类型将对应值以字符串形式返回
            </summary>
            <returns>字符串形式的值</returns>
        </member>
        <member name="T:PT.Toolkit.Portable.Runtime.ServerRuntimeVariable">
            <summary>
            服务器运行时变量特性,该特性可定义在类的静态或非静态成员变量或属性上
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Runtime.ServerRuntimeVariable.VariableClass">
            <summary>
            变量分类名称在控制台显示,可以使用'\'来划分层次
            </summary>
        </member>
        <member name="T:PT.Toolkit.Portable.Runtime.ServerRuntimeVariableList">
            <summary>
            ServerRuntimeVariable类列表,提供扩展功能访问
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.Runtime.ServerRuntimeVariableList.FindItemByVariableName(System.String,System.String)">
            <summary>
            根据名称在数组里查找对应变量
            </summary>
            <param name="variableClassName">分类名称,如果传空找第一个</param>
            <param name="variableName">变量名称</param>
            <returns>变量或null</returns>
        </member>
        <member name="T:PT.Toolkit.Portable.UI.BaseVisualItem">
            <summary>
            列表显示项基类
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.UI.BaseVisualItem.DisplayText">
            <summary>
            显示文本
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.UI.BaseVisualItem.Id">
            <summary>
            内部Id
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.UI.BaseVisualItem.Checked">
            <summary>
            选中状态
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.UI.BaseVisualItem.ImageIndex">
            <summary>
            图像索引
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.UI.BaseVisualItem.ToString">
            <summary>
            重写ToString
            </summary>
            <returns></returns>
        </member>
        <member name="T:PT.Toolkit.Portable.UI.BaseVisualItemList">
            <summary>
            BaseVisualItem列表
            </summary>
        </member>
        <member name="T:PT.Toolkit.Portable.ChineseConvert">
            <summary>
            汉字转换
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.ChineseConvert.otherPinYin">
            <summary>
            二级汉字对应拼音数组
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.ChineseConvert.GetFirst(System.Char)">
            <summary>
            取拼音第一个字段
            </summary>        
            <param name="ch"></param>        
            <returns></returns>        
        </member>
        <member name="M:PT.Toolkit.Portable.ChineseConvert.GetFirst(System.String)">
            <summary>
            取拼音第一个字段
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:PT.Toolkit.Portable.ChineseConvert.Get(System.Char)">
            <summary>
            获取单字拼音
            </summary>
            <param name="ch"></param>
            <returns></returns>
        </member>
        <member name="M:PT.Toolkit.Portable.ChineseConvert.Get(System.String)">
            <summary>
            把汉字转换成拼音(全拼)
            </summary>
            <param name="str">汉字字符串</param>
            <returns>转换后的拼音(全拼)字符串</returns>
        </member>
        <member name="T:PT.Toolkit.Portable.Collections.ObjectBuffer">
            <summary>
            缓冲数据集合管理类
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Collections.ObjectBuffer.ObjectCaches">
            <summary>
            数据缓冲区
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.Collections.ObjectBuffer.FindItemByType(System.Type)">
            <summary>
            根据类型查找对应的缓存数据,未加锁
            </summary>
            <param name="tp">类型</param>
            <returns>ObjectCacheItem</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Collections.ObjectBuffer.FindItemIndexByType(System.Type)">
            <summary>
            根据类型查找对应的缓存数据在缓冲区的索引,未加锁
            </summary>
            <param name="tp">类型</param>
            <returns>索引</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Collections.ObjectBuffer.ClearAllCache">
            <summary>
            清理掉所有缓冲
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.Collections.ObjectBuffer.GetSnapshot">
            <summary>
            获得快照信息
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.Collections.ObjectBuffer.GetObjectFromCache``1(System.Type)">
            <summary>
            获取缓冲类型对应的数据
            </summary>
            <typeparam name="T">缓冲类型泛型</typeparam>
            <param name="tp">缓冲类型</param>
            <returns>对应类型的缓冲数据对象或null</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Collections.ObjectBuffer.SetObjectToCache(System.Type,System.Object)">
            <summary>
            设置缓冲类型对应的数据
            </summary>
            <param name="tp">缓冲类型</param>
            <param name="o">缓冲数据对象</param>
        </member>
        <member name="T:PT.Toolkit.Portable.Collections.ObjectBuffer.ObjectCacheItem">
            <summary>
            以对象类型为索引的缓冲信息
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Collections.ObjectBuffer.ObjectCacheItem.ObjectType">
            <summary>
            对象类型
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Collections.ObjectBuffer.ObjectCacheItem.ObjectCache">
            <summary>
            对象缓存
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Collections.ObjectBuffer.ObjectCacheItem.LastRefreshTime">
            <summary>
            最后刷新时间
            </summary>
        </member>
        <member name="T:PT.Toolkit.Portable.Collections.StringListAddArgs">
            <summary>
            向列表添加字符串时的策略参数
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Collections.StringListAddArgs.AddUniqueItem">
            <summary>
            是否做唯一过滤,默认值:false
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Collections.StringListAddArgs.AddNull">
            <summary>
            值为null时是否添加,默认值:false
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Collections.StringListAddArgs.AddEmpty">
            <summary>
            值为空串时是否添加,默认值:false
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Collections.StringListAddArgs.AddSpace">
            <summary>
            值仅包含空格或制表符时是否添加,默认值:false
            </summary>
        </member>
        <member name="T:PT.Toolkit.Portable.Collections.StringListDecodeArgs">
            <summary>
            字符串解析策略参数
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Collections.StringListDecodeArgs.SeperateFlag">
            <summary>
            分隔符,默认值:','
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Collections.StringListDecodeArgs.AddArgs">
            <summary>
            向列表添加字符串时的策略参数
            </summary>
        </member>
        <member name="T:PT.Toolkit.Portable.Collections.StringList">
            <summary>
            分部类-升序相关处理函数
            </summary>
            <summary>
            分部类-降序相关处理函数
            </summary>
            <summary>
            string类列表，支持排序
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.Collections.StringList.GetInsertPositionAsc(System.String)">
            <summary>
            获取字符串在升序模式下的插入索引
            </summary>
            <param name="s"></param>
            <returns>升序模式下的插入索引</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Collections.StringList.GetInsertPositionAsc_Recurrence(System.String,System.Int32,System.Int32)">
            <summary>
            假定列表已按升序模式排序,使用2分法确定字符串的插入位置
            </summary>
            <param name="s"></param>
            <param name="proximateIndexOfSmall">列表中小于s的元素中最接近s的索引</param>
            <param name="proximateIndexOfLarge">列表中大于s的元素中最接近s的索引</param>
            <returns>加字符串的插入位置</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Collections.StringList.SortAsc">
            <summary>
            使用当前字符串比较方式用冒泡排序法进行升序排序
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.Collections.StringList.IndexOfAsc(System.String)">
            <summary>
            假设列表是升序排序的情况下进行2分检索
            </summary>
            <param name="s">检索的字符串</param>
            <returns></returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Collections.StringList.IndexOfAsc_Recurrence(System.String,System.Int32,System.Int32)">
            <summary>
            2分检索升序列表,第归子函数
            </summary>
            <param name="s"></param>
            <param name="indexStart"></param>
            <param name="indexStop"></param>
            <returns>索引位置</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Collections.StringList.GetInsertPositionDesc(System.String)">
            <summary>
            获取字符串在降序模式下的插入索引
            </summary>
            <param name="s"></param>
            <returns>降序模式下的插入索引</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Collections.StringList.GetInsertPositionDesc_Recurrence(System.String,System.Int32,System.Int32)">
            <summary>
            假定列表已按降序模式排序,使用2分法确定字符串的插入位置
            </summary>
            <param name="s"></param>
            <param name="proximateIndexOfLarge">列表中大于s的元素中最接近s的索引</param>
            <param name="proximateIndexOfSmall">列表中小于s的元素中最接近s的索引</param>
            <returns>加字符串的插入位置</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Collections.StringList.SortDesc">
            <summary>
            使用当前字符串比较方式用冒泡排序法进行升序排序
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.Collections.StringList.IndexOfDesc(System.String)">
            <summary>
            假设列表是降序排序的情况下进行2分检索
            </summary>
            <param name="s">检索的字符串</param>
            <returns></returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Collections.StringList.IndexOfDesc_Recurrence(System.String,System.Int32,System.Int32)">
            <summary>
            2分检索升序列表,第归子函数
            </summary>
            <param name="s"></param>
            <param name="indexStart"></param>
            <param name="indexStop"></param>
            <returns>索引位置</returns>
        </member>
        <member name="F:PT.Toolkit.Portable.Collections.StringList._Comparison">
            <summary>
            私有变量,大小的比较方式
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Collections.StringList._SortMode">
            <summary>
            私有变量,排序方式
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.Collections.StringList.DecodeComplexString(System.String,PT.Toolkit.Portable.Collections.StringListDecodeArgs)">
            <summary>
            解析复合字符串生成集合
            </summary>
            <param name="complexString">复合字符串</param>
            <param name="decodeArgs">字符串解析策略参数,为null时则使用默认值,以逗号作为分隔符解析字符串</param>
            <returns>分割后的字符串列表</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Collections.StringList.DecodeComplexString(System.String,PT.Toolkit.Portable.Collections.StringListDecodeArgs,PT.Toolkit.Portable.Collections.StringList)">
            <summary>
            解析复合字符串添加到集合
            </summary>
            <param name="complexString">复合字符串</param>
            <param name="decodeArgs">字符串解析策略参数,为null时则使用默认值,以逗号作为分隔符解析字符串</param>
            <param name="listToFill">填充列表</param>
        </member>
        <member name="M:PT.Toolkit.Portable.Collections.StringList.InsertEx(System.String,PT.Toolkit.Portable.Collections.StringListAddArgs)">
            <summary>
            按列表排序模式和插入策略，向列表增加字符串并返回索引，返回-1时说明不符合插入策略
            </summary>
            <param name="s">要增加的字符串</param>
            <param name="addArgs">向列表添加字符串时的策略参数，如果为null则使用默认策略</param>
            <returns>增加的字符串或合并的字符串（策略判断）在列表中的索引，返回-1时说明不符合增加策略</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Collections.StringList.InsertEx(System.String)">
            <summary>
            按当前指定的排序方式添加字符串,若排序方式与列表中的已有元素排序方式不同，则新追加元素会被放在错误的位置。
            </summary>
            <param name="s">要添加的字符串</param>
            <returns>添加后的字符串所在位置的索引或-1</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Collections.StringList.GetInsertPosition(System.String)">
            <summary>
            根据当前列表的排序模式和比较模式,使用2分法确定要追加字符串的插入位置
            </summary>
            <param name="s"></param>
            <returns>插入位置</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Collections.StringList.SortEx">
            <summary>
            使用当前的比较模式和排序方式对列表进行排序
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.Collections.StringList.IndexOfEx(System.String)">
            <summary>
            按指定的排序方式搜索指定的对象，并返回第一个匹配项的从零开始的索引,有序列表会获得更高效率。
            </summary>
            <param name="s"></param>
            <returns>索引或-1</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Collections.StringList.GenerateComplexString(System.String)">
            <summary>
            列表转换为复合字符串，中间增加指定分隔符
            </summary>
            <param name="seperateFlag"></param>
            <returns>复合字符串</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Collections.StringList.AddRangeEx(System.String[],PT.Toolkit.Portable.Collections.StringListAddArgs)">
            <summary>
            添加数组中唯一并且非null非空字符串
            </summary>
            <param name="strings">数组</param>
            <param name="addArgs">向列表添加字符串时的策略参数，如果为null则使用默认策略</param>
        </member>
        <member name="M:PT.Toolkit.Portable.Collections.StringList.AddRangeEx(PT.Toolkit.Portable.Collections.StringList,PT.Toolkit.Portable.Collections.StringListAddArgs)">
            <summary>
            添加其它列表中唯一并且非null非空字符串
            </summary>
            <param name="strings">数组</param>
            <param name="addArgs">向列表添加字符串时的策略参数，如果为null则使用默认策略</param>>
        </member>
        <member name="P:PT.Toolkit.Portable.Collections.StringList.Comparison">
            <summary>
            指示当前列表元素间值大小的比较方式,默认值为StringComparison.Ordinal,改变后会引起列表元素索引值的变化
            </summary>
        </member>
        <member name="P:PT.Toolkit.Portable.Collections.StringList.SortMode">
            <summary>
            指示当前列表元素排序方式,默认值为SortModeEnum.None,改变后会引起列表元素索引值的变化
            </summary>
        </member>
        <member name="P:PT.Toolkit.Portable.Collections.StringList.TotalBytes">
            <summary>
            计算列表包含的所有字符的字节数,汉字占两字节
            </summary>
        </member>
        <member name="T:PT.Toolkit.Portable.Schedule.ActionCallbackInfo">
            <summary>
            不带参数和返回值的回调信息
            </summary>
        </member>
        <member name="T:PT.Toolkit.Portable.Schedule.CallbackInfo">
            <summary>
            回调信息基类
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Schedule.CallbackInfo.CallbackDesc">
            <summary>
            本次请求描述，用于调试
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Schedule.CallbackInfo.PresetContext">
            <summary>
            预置的上下文场景模式，CallbackContextMode = CallbackContextModeEnum.Preset时有效
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Schedule.CallbackInfo.CallbackContextMode">
            <summary>
            回调时上下文场景模式
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Schedule.CallbackInfo.CallbackTimeOut">
            <summary>
            单位:毫秒,默认值:-1。
            回调时超时时间,大于0时有效，超时后将尝试结束调用场景所属线程
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Schedule.CallbackInfo.MemoryConsume">
            <summary>
            本次请求的内存消耗值，用于队列上限控制
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Schedule.ActionCallbackInfo.Callback">
            <summary>
            不带参数和返回值的回调函数
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Schedule.ActionCallbackInfo.EndCallback">
            <summary>
            可为null,回调完成通知委托函数,如果有异常则附带异常
            </summary>
        </member>
        <member name="T:PT.Toolkit.Portable.Schedule.CallbackContextModeEnum">
            <summary>
            任务回调时上下文同步方式枚举
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Schedule.CallbackContextModeEnum.Apartment">
            <summary>
            独立线程场景
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Schedule.CallbackContextModeEnum.Preset">
            <summary>
            预置的线程场景
            </summary>
        </member>
        <member name="T:PT.Toolkit.Portable.Schedule.FuncCallbackInfo">
            <summary>
            带一个参数和返回值的回调信息
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Schedule.FuncCallbackInfo.Callback">
            <summary>
            带一个参数和返回值的回调函数
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Schedule.FuncCallbackInfo.InputParam">
            <summary>
            函数输入参数
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Schedule.FuncCallbackInfo.EndCallback">
            <summary>
            可为null,回调完成通知委托函数,附带传入参数值(第2个参数)和返回值(第3个参数),如果有异常则回调时附带异常
            </summary>
        </member>
        <member name="T:PT.Toolkit.Portable.Schedule.ParamActionCallbackInfo">
            <summary>
            带一个参数但不带返回值的回调信息
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Schedule.ParamActionCallbackInfo.Callback">
            <summary>
            带一个参数但不带返回值的回调函数
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Schedule.ParamActionCallbackInfo.InputParam">
            <summary>
            函数输入参数
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Schedule.ParamActionCallbackInfo.EndCallback">
            <summary>
            可为null,回调完成通知委托函数,附带传入参数值,如果有异常则附带异常
            </summary>
        </member>
        <member name="T:PT.Toolkit.Portable.Schedule.ParallelTasks">
            <summary>
            使用指定数量的子线程并行执行任务队列，
            如任务委托不是静态函数，则委托的实体类会处于关联引用状态，使用时需注意内存占用。
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Schedule.ParallelTasks.TaskTitle">
            <summary>
            分类的任务说明或标识，调试时使用
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Schedule.ParallelTasks.MaxQueueCountLimit">
            <summary>
            最大队列数量限制，大于0时有效,默认值:-1
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Schedule.ParallelTasks.MaxMemoryConsumeLimit">
            <summary>
            最大队列请求总内存消耗限制，大于0时有效,默认值:-1
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Schedule.ParallelTasks.MaxParallelLimit">
            <summary>
            最大并行线程限制，大于0时有效,默认值:3。当值为1时任务队列以串行方式在单线程中执行
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Schedule.ParallelTasks.Queues">
            <summary>
            请求队列信息
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Schedule.ParallelTasks.ParallelThreadScenes">
            <summary>
            队列任务执行线程场景信息
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.Schedule.ParallelTasks.GetSnapshot">
            <summary>
            获取信息快照
            </summary>
            <returns></returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Schedule.ParallelTasks.PostAction(PT.Toolkit.Portable.Schedule.ActionCallbackInfo)">
            <summary>
            投递一个无参数无返回值的委托到任务队列
            </summary>
            <param name="callbackInfo">回调信息</param>
            <returns>返回空串表示投递成功，否则返回错误信息</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Schedule.ParallelTasks.PostAction(PT.Toolkit.Portable.Schedule.ParamActionCallbackInfo)">
            <summary>
            投递一个带参数无返回值的委托到任务队列
            </summary>
            <param name="callbackInfo">回调信息</param>
            <returns>返回空串表示投递成功，否则返回错误信息</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Schedule.ParallelTasks.PostFunc(PT.Toolkit.Portable.Schedule.FuncCallbackInfo)">
            <summary>
            投递一个带参数带返回值的委托到任务队列
            </summary>
            <param name="callbackInfo">回调信息</param>
            <returns>返回空串表示投递成功，否则返回错误信息</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Schedule.ParallelTasks.GetRequestQueueMemoryConsume">
            <summary>
            计算队列目前占用内存
            </summary>
            <returns></returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Schedule.ParallelTasks.Post(PT.Toolkit.Portable.Schedule.TaskCallScene)">
            <summary>
            投递到任务队列
            </summary>
            <param name="callScene">调用场景</param>
            <returns>返回空串表示投递成功，否则返回错误信息</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Schedule.ParallelTasks.RunThreadEntry(System.Object)">
            <summary>
            线程函数
            </summary>
            <param name="state"></param>
        </member>
        <member name="T:PT.Toolkit.Portable.Schedule.TargetValueStateTrigger">
            <summary>
            以达到期望值(正向、反向)为目标的状态触发类
            </summary>
        </member>
        <member name="T:PT.Toolkit.Portable.Schedule.StateTrigger">
            <summary>
            状态触发类基类
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Schedule.StateTrigger.InitialState">
            <summary>
            初始及回调参数值
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Schedule.StateTrigger.LockedObject">
            <summary>
            内部资源锁
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Schedule.StateTrigger.OnTrigger">
            <summary>
            满足条件时的触发回调委托，传递InitialState
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Schedule.StateTrigger.Starting">
            <summary>
            是否处于触发判断状态
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.Schedule.StateTrigger.#ctor">
            <summary>
            隐藏构造
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.Schedule.StateTrigger.Trigger">
            <summary>
            触发事件
            </summary>
        </member>
        <member name="P:PT.Toolkit.Portable.Schedule.StateTrigger.IsStarting">
            <summary>
            是否处于触发判断状态
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Schedule.TargetValueStateTrigger.CurrentValue">
            <summary>
            起始值
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Schedule.TargetValueStateTrigger.OriginalValue">
            <summary>
            起始值备份
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Schedule.TargetValueStateTrigger.TargetValue">
            <summary>
            目标值
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.Schedule.TargetValueStateTrigger.BeginTrigger(System.Int32,System.Int32)">
            <summary>
            设置并开始进行触发判定
            </summary>
            <param name="originalValue">起始值</param>
            <param name="targetValue">目标值</param>
            <returns>是否成功地开始进行触发判定</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Schedule.TargetValueStateTrigger.UpdateState(System.Int32)">
            <summary>
            更新触发标记计数，使当前值增加或递减指定数，当达到目标值时，在当前线程触发回调事件并停止触发判定
            </summary>
            <param name="updateValue">增量</param>
            <returns>更新是否成功，在未开始触发判定状态(不包括最后一次)或标记不对情况下会返回false</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Schedule.TargetValueStateTrigger.UpdateStep(System.UInt32)">
            <summary>
            更新触发标记计数，使当前值向目标值移动指定数，当达到目标值时，在当前线程触发回调事件并停止触发判定
            </summary>
            <param name="stepValue">增量</param>
            <returns>更新是否成功，在未开始触发判定状态(不包括最后一次)或标记不对情况下会返回false</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Schedule.TargetValueStateTrigger.Reset">
            <summary>
            重置状态为初始值并进入触发判断状态，但不改变触发类型和触发条件
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.Schedule.TargetValueStateTrigger.Stop">
            <summary>
            重置状态为初始值并停止触发判断状态，但不改变触发类型和触发条件
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.Schedule.TargetValueStateTrigger.Reset_InLocker">
            <summary>
            重置状态为初始值
            </summary>
        </member>
        <member name="T:PT.Toolkit.Portable.Schedule.IntegerCollectionStateTrigger">
            <summary>
            整数标记集合状态触发类
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Schedule.IntegerCollectionStateTrigger.IntegerFlags">
            <summary>
            整数标记集合
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Schedule.IntegerCollectionStateTrigger.IntegerFlags_Backup">
            <summary>
            备份整数标记集合
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.Schedule.IntegerCollectionStateTrigger.BeginTrigger(System.Int32[])">
            <summary>
            设置并开始进行触发判定
            </summary>
            <param name="intFlags">指定整数标记数组</param>
            <returns>是否成功地开始进行触发判定</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Schedule.IntegerCollectionStateTrigger.BeginTrigger(System.Int32,System.Int32)">
            <summary>
            设置并开始进行触发判定
            </summary>
            <param name="iBegin">指定整数标记数组范围起始值</param>
            <param name="iEnd">指定整数标记数组范围结束值</param>
            <returns>是否成功地开始进行触发判定</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Schedule.IntegerCollectionStateTrigger.UpdateState(System.Int32,System.Boolean)">
            <summary>
            更新一个触发标记，当集合中所有标记为true时，在当前线程触发回调事件并停止触发判定
            </summary>
            <param name="iFlag">触发标记</param>
            <param name="flagState">状态</param>
            <returns>更新是否成功，在未开始触发判定状态(不包括最后一次)或标记不对情况下会返回false</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Schedule.IntegerCollectionStateTrigger.Reset">
            <summary>
            重置状态为初始值并进入触发判断状态，但不改变触发类型和触发条件
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.Schedule.IntegerCollectionStateTrigger.Stop">
            <summary>
            重置状态为初始值并停止触发判断状态，但不改变触发类型和触发条件
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.Schedule.IntegerCollectionStateTrigger.Reset_InLocker">
            <summary>
            重置状态为初始值
            </summary>
        </member>
        <member name="T:PT.Toolkit.Portable.Schedule.SluggishTask">
            <summary>
            惰性任务执行类,对实时要求不强的函数采取惰性方式在异步线程中执行，运行过程包括惰性期和回调期
            惰性期内的重叠调用请求会拖延惰性时间并最终只执行一次
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Schedule.SluggishTask.TaskTitle">
            <summary>
            惰性任务说明或标识，调试时使用
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Schedule.SluggishTask.LockObjecct">
            <summary>
            用于并发请求互斥锁定
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Schedule.SluggishTask.Delay">
            <summary>
            单位:毫秒,默认值:1000。
            每次最新调用请求后的懒惰延迟时长,惰性期内每次新请求重新计算延迟时间。
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Schedule.SluggishTask.MinDelayPerCall">
            <summary>
            单位:毫秒,默认值:-1。
            两次实际调用允许的最小时间间隔,大于0时有效
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Schedule.SluggishTask.MaxDelayAfterRequest">
            <summary>
            单位:毫秒,默认值:-1。
            当有调用请求时允许拖延的最大时间间隔,大于0时有效,
            此策略优先级高于MinDelayPerCall
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Schedule.SluggishTask.IgnoreRequestWhenCallingback">
            <summary>
            默认值:false,是否忽略回调期内的新请求。
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Schedule.SluggishTask.IsRunning">
            <summary>
            标记惰性调用过程程是否正在运行
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Schedule.SluggishTask.LastRequestTime">
            <summary>
            上次请求惰性运行时间
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Schedule.SluggishTask.LastProcessedTime">
            <summary>
            上次完成惰性运行时间
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Schedule.SluggishTask.ExistsNewRequest">
            <summary>
            是否有惰性运行请求
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Schedule.SluggishTask.NewestSlugishCallScene">
            <summary>
            最新请求场景
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.Schedule.SluggishTask.PostAction(PT.Toolkit.Portable.Schedule.ActionCallbackInfo)">
            <summary>
            投递一个无参数无返回值的委托并开始惰性调用,惰性期内的重叠调用请求在执行时将使用最后一次方法委托
            </summary>
            <param name="callbackInfo">回调信息</param>
            <returns>返回空串表示投递成功，否则返回错误信息</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Schedule.SluggishTask.PostAction(PT.Toolkit.Portable.Schedule.ParamActionCallbackInfo)">
            <summary>
            投递一个带参数无返回值的委托并开始惰性调用
            </summary>
            <param name="callbackInfo">回调信息</param>
            <returns>返回空串表示投递成功，否则返回错误信息</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Schedule.SluggishTask.PostFunc(PT.Toolkit.Portable.Schedule.FuncCallbackInfo)">
            <summary>
            投递一个带参数带返回值的委托并开始惰性调用
            </summary>
            <param name="callbackInfo">回调信息</param>
            <returns>返回空串表示投递成功，否则返回错误信息</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Schedule.SluggishTask.Post(PT.Toolkit.Portable.Schedule.TaskCallScene)">
            <summary>
            投递并开始惰性调用
            </summary>
            <param name="slugishCallScene">调用场景</param>
            <returns>返回空串表示投递成功，否则返回错误信息</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Schedule.SluggishTask.RunThreadEntry(System.Object)">
            <summary>
            线程函数
            </summary>
            <param name="state"></param>
        </member>
        <member name="T:PT.Toolkit.Portable.Schedule.StringCollectionStateTrigger">
            <summary>
            字符串标记集合状态触发类
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Schedule.StringCollectionStateTrigger.StringFlags">
            <summary>
            字符串标记集合
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.Schedule.StringCollectionStateTrigger.BeginTrigger(System.String[])">
            <summary>
            设置并开始进行触发判定
            </summary>
            <param name="stringFlags">指定字符串标记数组</param>
            <returns>是否成功地开始进行触发判定</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Schedule.StringCollectionStateTrigger.BeginTrigger(PT.Toolkit.Portable.Collections.StringList)">
            <summary>
            设置并开始进行触发判定
            </summary>
            <param name="stringFlags">指定字符串标记列表</param>
            <returns>是否成功地开始进行触发判定</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Schedule.StringCollectionStateTrigger.UpdateState(System.String,System.Boolean)">
            <summary>
            更新一个触发标记，当集合中所有标记为true时，在当前线程触发回调事件并停止触发判定
            </summary>
            <param name="sFlag">触发标记</param>
            <param name="flagState">状态</param>
            <returns>更新是否成功，在未开始触发判定状态(不包括最后一次)或标记不对情况下会返回false</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Schedule.StringCollectionStateTrigger.Reset">
            <summary>
            重置状态为初始值并进入触发判断状态，但不改变触发类型和触发条件
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.Schedule.StringCollectionStateTrigger.Stop">
            <summary>
            重置状态为初始值并停止触发判断状态，但不改变触发类型和触发条件
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.Schedule.StringCollectionStateTrigger.Reset_InLocker">
            <summary>
            重置状态为初始值
            </summary>
        </member>
        <member name="T:PT.Toolkit.Portable.Schedule.StepWatch">
            <summary>
            类似System.Diagnostics.StopWatch,执行限制控制判断类，辅助判断某个操作在指定时间内只运行一次
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Schedule.StepWatch.LastStepTime">
            <summary>
            上次执行时间标记
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Schedule.StepWatch.LimitInteval">
            <summary>
            时间间隔限定,毫秒
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Schedule.StepWatch.AutoResetStepTime">
            <summary>
            CanStepOver返回true后是否自动变更计时时间
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.Schedule.StepWatch.CanStepOver">
            <summary>
            是否满足条件执行下一次操作
            使用内置的时间间隔限定值判断限定条件
            使用内置的自动更新标记确定返回ture时是否更改计时标记
            </summary>
            <returns>是否满足条件执行下一次操作</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Schedule.StepWatch.CanStepOver(System.Int32)">
            <summary>
            是否满足条件执行下一次操作
            使用内置的自动更新标记确定返回ture时是否更改计时标记
            </summary>
            <param name="limitInteval">时间间隔，毫秒</param>
            <returns></returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Schedule.StepWatch.CanStepOver(System.Boolean)">
            <summary>
            是否满足条件执行下一次操作
            使用内置的时间间隔限定值判断限定条件
            </summary>
            <param name="autoResetStepTime">CanStepOver返回true后是否自动变更计时时间</param>
            <returns></returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Schedule.StepWatch.CanStepOver(System.Int32,System.Boolean)">
            <summary>
            是否满足条件执行下一次操作
            </summary>
            <param name="limitInteval">时间间隔，毫秒</param>
            <param name="autoResetStepTime">CanStepOver返回true后是否自动变更计时时间</param>
            <returns>是否满足条件执行下一次操作</returns>
        </member>
        <member name="T:PT.Toolkit.Portable.Schedule.TaskCallScene">
            <summary>
            内部使用的任务调用场景
            </summary>
            <summary>
            内部使用的任务调用场景
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.Schedule.TaskCallScene.DebugOutput(System.String,PT.Toolkit.Portable.Schedule.TaskCallScene,System.String)">
            <summary>
            调试信息输出封装
            </summary>
            <param name="taskTitle">任务名称</param>
            <param name="callScene">请求场景信息</param> 
            <param name="debugMessage"></param>
        </member>
        <member name="M:PT.Toolkit.Portable.Schedule.TaskCallScene.DebugOutput(System.String,System.String)">
            <summary>
            调试信息输出封装
            </summary>
            <param name="taskTitle">任务名称</param>
            <param name="debugMessage">调试信息</param>
        </member>
        <member name="M:PT.Toolkit.Portable.Schedule.TaskCallScene.Sleep(System.Int32)">
            <summary>
            使线程睡眠指定时间
            </summary>
            <param name="millisecondsTimeout"></param>
        </member>
        <member name="M:PT.Toolkit.Portable.Schedule.TaskCallScene.CallScene(System.String,PT.Toolkit.Portable.Schedule.TaskCallScene)">
            <summary>
            满足条件开始调用实际函数
            </summary>
            <param name="scene"></param>
        </member>
        <member name="M:PT.Toolkit.Portable.Schedule.TaskCallScene.SyncDynamicInvoke(System.Delegate,System.String,PT.Toolkit.Portable.Schedule.TaskCallScene,System.Threading.SynchronizationContext,System.Int32,System.Object[])">
            <summary>
            同步模式下在指定上下文场景中调用委托
            </summary>
            <param name="d">委托</param>
            <param name="sc">上下文场景</param>
            <param name="CallbackTimeOut">回调超时时间，单位:毫秒，大于0有效</param>
            <param name="args">委托动态参数</param>
        </member>
        <member name="M:PT.Toolkit.Portable.Schedule.TaskCallScene.TimeoutMonitorEntry(System.Object)">
            <summary>
            超时监控线程入口
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Schedule.TaskCallScene.PresetContext">
            <summary>
            预置的上下文场景模式，CallbackContextMode = CallbackContextModeEnum.Preset时有效
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Schedule.TaskCallScene.CallbackContextMode">
            <summary>
            回调时上下文场景模式
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Schedule.TaskCallScene.CallbackTimeOut">
            <summary>
            单位:毫秒,默认值:-1。
            回调时超时时间,大于0时有效，超时后将尝试结束调用场景所属线程
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Schedule.TaskCallScene.Desc">
            <summary>
            本次请求说明或标识，调试时使用
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Schedule.TaskCallScene.CallMode">
            <summary>
            函数调用类型，0:Action,1:Action[object],2:Func[object, object]
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Schedule.TaskCallScene.Callback">
            <summary>
            回调函数，根据模式不同，调用方式不同
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Schedule.TaskCallScene.InputParam">
            <summary>
            函数输入参数 ，模式1、2有效
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Schedule.TaskCallScene.EndCallback">
            <summary>
            回调完成通知委托函数，根据模式不同，调用方式不同
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Schedule.TaskCallScene.MemoryConsume">
            <summary>
            本次请求的内存消耗值，用于队列上限控制
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.Schedule.TaskCallScene.Consume">
            <summary>
            计算队列占用的内存
            </summary>
            <returns>请求参数占用的内存</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Schedule.TaskCallScene.CopyFrom(PT.Toolkit.Portable.Schedule.CallbackInfo)">
            <summary>
            从回调信息类拷贝信息
            </summary>
            <param name="callbackInfo">回调参数类</param>
        </member>
        <member name="F:PT.Toolkit.Portable.Schedule.TaskHelper.TerminateThreadEntry">
            <summary>
            线程终止委托，设置后允许调度任务关闭超时线程
            </summary>
        </member>
        <member name="T:PT.Toolkit.Portable.Schedule.ThreadScene">
            <summary>
            通用的线程场景类，用于控制线程运行行为和传递参数
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Schedule.ThreadScene.InitialData">
            <summary>
            线程入口初始化传入参数
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Schedule.ThreadScene.OuterWasteFlag">
            <summary>
            外界控制作废标志，线程轮询此标记时如果为true则应退出。
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Schedule.ThreadScene.State">
            <summary>
            通用交互状态，用于和线程异步交互
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Schedule.ThreadScene.OuterState">
            <summary>
            外界交互状态，用于和线程异步交互
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Schedule.ThreadScene.OuterData">
            <summary>
            外界交互值，用于和线程异步交互
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Schedule.ThreadScene.InnerState">
            <summary>
            线程交互状态，用于和线程异步交互
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Schedule.ThreadScene.InnerData">
            <summary>
            线程交互值，用于和线程异步交互
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Schedule.ThreadScene.InnerWasteFlag">
            <summary>
            线程自身设置作废标志，线程退出前设置此标记为true。
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Schedule.ThreadScene.IsRunning">
            <summary>
            线程是否正在运行标志。
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Schedule.ThreadScene.LockObject">
            <summary>
            用于线程间控制本类信息资源锁定
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Schedule.ThreadScene.StartTime">
            <summary>
            开始运行时间
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Schedule.ThreadScene.StopTime">
            <summary>
            停止运行时间
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.Schedule.ThreadScene.GetSnapshot">
            <summary>
            获取信息快照
            </summary>
            <returns></returns>
        </member>
        <member name="P:PT.Toolkit.Portable.Schedule.ThreadScene.IsWaste">
            <summary>
            判断关联的线程场景是否作废
            </summary>
            <returns></returns>
        </member>
        <member name="T:PT.Toolkit.Portable.Schedule.ThreadSceneList">
            <summary>
            ThreadScene列表类
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.Schedule.ThreadSceneList.CleanupSceneList">
            <summary>
            在锁定模式下调用，清理无效场景
            </summary>
        </member>
        <member name="P:PT.Toolkit.Portable.Schedule.ThreadSceneList.ValidSceneCount">
            <summary>
            正在运行的有效的场景数量
            </summary>
            <returns>有效的场景数量</returns>
        </member>
        <member name="T:PT.Toolkit.Portable.SortModeEnum">
            <summary>
            数值型或字符串型列表排序模式
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.SortModeEnum.None">
            <summary>
            不排序
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.SortModeEnum.ASC">
            <summary>
            升序
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.SortModeEnum.DESC">
            <summary>
            降序
            </summary>
        </member>
        <member name="T:PT.Toolkit.Portable.Collections.UIntFlagCollection">
            <summary>
            无符号32位整数标记集合类,适合性能要求较高的标记操作场景
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Collections.UIntFlagCollection.buffer">
            <summary>
            缓存区
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Collections.UIntFlagCollection.MaxNumber">
            <summary>
            缓存区
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.Collections.UIntFlagCollection.#ctor(System.UInt32,System.Boolean)">
            <summary>
            构造
            </summary>
            <param name="maxNumber">标记编号最大值</param>
            <param name="flagState">所有标记初始状态</param>
        </member>
        <member name="M:PT.Toolkit.Portable.Collections.UIntFlagCollection.SetStateAll(System.Boolean)">
            <summary>
            对集合中所有标记设置状态
            </summary>
            <param name="flagState">新标记状态</param>
        </member>
        <member name="M:PT.Toolkit.Portable.Collections.UIntFlagCollection.SetState(System.Boolean,System.UInt32[])">
            <summary>
            批量对指定标记设置状态
            </summary>
            <param name="flagState">标记的新状态</param>
            <param name="flagNumbers">标记位置</param>
        </member>
        <member name="M:PT.Toolkit.Portable.Collections.UIntFlagCollection.GetState(System.UInt32)">
            <summary>
            获取指定标记状态
            </summary>
            <param name="flagNumber">标记</param>
            <returns>标记状态</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Collections.UIntFlagCollection.AnyoneHasState(System.Boolean,System.UInt32[])">
            <summary>
            检查指定标记集合，判断至少其中一个具有指定的状态
            </summary>
            <param name="flagState">要进行判断的状态</param>
            <param name="flagNumbers">标记集合</param>
            <returns>是否至少其中一个具有指定的状态</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Collections.UIntFlagCollection.EveryoneHasState(System.Boolean,System.UInt32[])">
            <summary>
            检查每个指定标记，判断他们是否全部具有指定状态
            </summary>
            <param name="flagState">要进行判断的状态</param>
            <param name="flagNumbers">标记集合</param>
            <returns>是否全部具有指定状态</returns>
        </member>
        <member name="T:PT.Toolkit.Portable.Collections.Stack`1">
            <summary>
            堆栈
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Collections.Stack`1.list">
            <summary>
            堆栈列表
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.Collections.Stack`1.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.Collections.Stack`1.Clear">
            <summary>
            移除所有对象
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.Collections.Stack`1.Contains(`0)">
            <summary>
             确定某元素是否在Stack 中。
            </summary>
            <param name="obj">对象</param>
            <returns>是否在Stack 中</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Collections.Stack`1.Peek">
            <summary>
            返回位于Stack 顶部的对象但不将其移除。
            </summary>
            <returns>堆栈对象</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Collections.Stack`1.Pop">
            <summary>
            弹出位于Stack 顶部的对象。
            </summary>
            <returns>堆栈对象</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Collections.Stack`1.Pop(System.Int32)">
            <summary>
            弹出位于Stack顶部开始的相对位置的对象，0为Stack顶部第一个对象。
            </summary>
            <param name="n">从stack顶部开始的索引</param>
            <returns>堆栈对象</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Collections.Stack`1.Pick(System.Int32)">
            <summary>
            挑选出指定位置的元素。
            </summary>
            <param name="n">从集合开始位置的索引</param>
            <returns>堆栈对象</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Collections.Stack`1.Push(`0)">
            <summary>
            将对象插入 Stack 的顶部。
            </summary>
            <param name="obj">对象</param>
        </member>
        <member name="P:PT.Toolkit.Portable.Collections.Stack`1.Count">
            <summary>
            获取包含的元素数
            </summary>
        </member>
        <member name="P:PT.Toolkit.Portable.Collections.Stack`1.Item(System.Int32)">
            <summary>
            允许通过索引访问任意堆栈位置的对象,0开始为堆栈最底部数据
            </summary>
            <param name="index">索引</param>
            <returns>堆栈对象</returns>
        </member>
        <member name="T:PT.Toolkit.Portable.Cron.CronElementProcessModeEnum">
            <summary>
            元素取值模式枚举
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Cron.CronElementProcessModeEnum.Any">
            <summary>
            0 任意值,对应符号'*'
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Cron.CronElementProcessModeEnum.Ignore">
            <summary>
            1 当前条件下此规则设置不需要关心,对应符号'?'
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Cron.CronElementProcessModeEnum.L">
            <summary>
            2 表示最后，只能出现在DayofWeek和DayofMonth域 ,对应符号'L'
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Cron.CronElementProcessModeEnum.W">
            <summary>
            3 表示有效工作日，只能出现在DayofMonth域,对应符号'W'
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Cron.CronElementProcessModeEnum.LW">
            <summary>
            4 LW组合，只能出现在DayofMonth域,对应符号'LW'
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Cron.CronElementProcessModeEnum.DayofWeekofMonth">
            <summary>
            5 表示每月的第几个周几，只能出现在DayofWeek域,对应符号'#'
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Cron.CronElementProcessModeEnum.Increment">
            <summary>
            6 按规则递增，对应符号'/'
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Cron.CronElementProcessModeEnum.MultiValue">
            <summary>
            7 从多值中选择，对应符号','或'-'
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Cron.CronElementProcessModeEnum.Unknow">
            <summary>
            99 未知
            </summary>
        </member>
        <member name="T:PT.Toolkit.Portable.DataSectionFromObjectArgs">
            <summary>
            DataSection解析对象成员时配置参数
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.DataSectionFromObjectArgs.AnalysisDegree">
            <summary>
            解析层次深度，符合类型对象的解析深度,默认为3
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.DataSectionFromObjectArgs.AnalysisArrayLength">
            <summary>
            解析数组的长度限制，默认为50
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.DataSectionFromObjectArgs.IsAnalysisFieldMember">
            <summary>
            是否解析普通字段成员，默认为true
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.DataSectionFromObjectArgs.IsAnalysisPropertyMember">
            <summary>
            是否解析属性成员，默认为true
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.DataSectionFromObjectArgs.RootObjectDesc">
            <summary>
            根节点对象描述名称
            </summary>
        </member>
        <member name="T:PT.Toolkit.Portable.DataSectionFormatArgs">
            <summary>
            DataSection格式化字符串时参数
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.DataSectionFormatArgs.IndentString">
            <summary>
            生成的文本的分级缩进字符串,默认为空格
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.DataSectionFormatArgs.StringLenthLimit">
            <summary>
            单个字符串内容显示的最大长度,默认为200
            </summary>
        </member>
        <member name="T:PT.Toolkit.Portable.DayofWeekHelper">
            <summary>
            提供对周日期的辅助函数
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.DayofWeekHelper.Monday">
            <summary>
            星期一
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.DayofWeekHelper.Tuesday">
            <summary>
            星期二
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.DayofWeekHelper.Wednesday">
            <summary>
            星期三
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.DayofWeekHelper.Thursday">
            <summary>
            星期四
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.DayofWeekHelper.Friday">
            <summary>
            星期五
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.DayofWeekHelper.Saturday">
            <summary>
            星期六
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.DayofWeekHelper.Sunday">
            <summary>
            星期日
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.DayofWeekHelper.MondayUpper">
            <summary>
            星期一大写
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.DayofWeekHelper.TuesdayUpper">
            <summary>
            星期二大写
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.DayofWeekHelper.WednesdayUpper">
            <summary>
            星期三大写
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.DayofWeekHelper.ThursdayUpper">
            <summary>
            星期四大写
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.DayofWeekHelper.FridayUpper">
            <summary>
            星期五大写
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.DayofWeekHelper.SaturdayUpper">
            <summary>
            星期六大写
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.DayofWeekHelper.SundayUpper">
            <summary>
            星期日大写
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.DayofWeekHelper.MondayAbb">
            <summary>
            星期一缩写
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.DayofWeekHelper.TuesdayAbb">
            <summary>
            星期二缩写
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.DayofWeekHelper.WednesdayAbb">
            <summary>
            星期三缩写
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.DayofWeekHelper.ThursdayAbb">
            <summary>
            星期四缩写
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.DayofWeekHelper.FridayAbb">
            <summary>
            星期五缩写
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.DayofWeekHelper.SaturdayAbb">
            <summary>
            星期六缩写
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.DayofWeekHelper.SundayAbb">
            <summary>
            星期日缩写
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.DayofWeekHelper.MondayUpperAbb">
            <summary>
            星期一大写缩写
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.DayofWeekHelper.TuesdayUpperAbb">
            <summary>
            星期二大写缩写
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.DayofWeekHelper.WednesdayUpperAbb">
            <summary>
            星期三大写缩写
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.DayofWeekHelper.ThursdayUpperAbb">
            <summary>
            星期四大写缩写
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.DayofWeekHelper.FridayUpperAbb">
            <summary>
            星期五大写缩写
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.DayofWeekHelper.SaturdayUpperAbb">
            <summary>
            星期六大写缩写
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.DayofWeekHelper.SundayUpperAbb">
            <summary>
            星期日大写缩写
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.DayofWeekHelper.GetDayFromName(System.String)">
            <summary>
            尝试将英文单词对应的天转化为数字,1对应周一,7对应周日,-1表示无效
            </summary>
            <param name="dowName">周日历单词</param>
            <returns>1对应周一,7对应周日,-1表示无效</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.DayofWeekHelper.GetDayFromNameAbb(System.String)">
            <summary>
            尝试将英文单词缩写对应的天转化为数字,1对应周一,7对应周日-1表示无效
            </summary>
            <param name="dowNameAbb">周日历单词缩写</param>
            <returns>1对应周一,7对应周日,-1表示无效</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.DayofWeekHelper.ContainsNameAbb(System.String)">
            <summary>
            判断一个字符串中是否包含周日历单词的缩写
            </summary>
            <param name="s">字符串</param>
            <returns>是否包含</returns>
        </member>
        <member name="T:PT.Toolkit.Portable.ExceptionHelper">
            <summary>
            异常处理辅助类
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.ExceptionHelper.FormatException(System.Exception)">
            <summary>
            格式化异常信息及堆栈信息为一个字符串输出
            </summary>
            <param name="ex">异常</param>
            <returns>格式化信息</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.ExceptionHelper.FormatExceptionEx(System.Exception,System.Boolean)">
            <summary>
            格式化异常信息及堆栈信息为一个字符串输出
            </summary>
            <param name="ex">异常</param>
            <param name="IsDiet">是否对冗余的堆栈描述信息进行缩略处理以节省空间</param>
            <returns>格式化信息</returns>
        </member>
        <member name="T:PT.Toolkit.Portable.ParamsHelper">
            <summary>
            类－命令行解析
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.ParamsHelper.IsElementSeperator(PT.Toolkit.Portable.ParamsHelper.ParseParamsPolicy,System.Char)">
            <summary>
            是否是分隔符号
            </summary>
            <param name="ppp">参数解析策略</param>
            <param name="c">符号</param>
            <returns>是否是分隔符号</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.ParamsHelper.IsEvalueFlag(PT.Toolkit.Portable.ParamsHelper.ParseParamsPolicy,System.Char)">
            <summary>
            判断符号是否是赋值符号
            </summary>
            <param name="ppp">参数解析策略</param>
            <param name="c">符号</param>
            <returns>是否是赋值符号</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.ParamsHelper.IsPrefixFlag(PT.Toolkit.Portable.ParamsHelper.ParseParamsPolicy,System.Char)">
            <summary>
            判断符号是否是参数前缀标志符号
            </summary>
            <param name="ppp">参数解析策略</param>
            <param name="c">符号</param>
            <returns>是否是参数前缀标志</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.ParamsHelper.ParseParams(System.String,PT.Toolkit.Portable.ParamsHelper.ParseParamsPolicy)">
            <summary>
            解析传入的参数行并返回参数列表。默认赋值标识符为 '='。默认参数开始标识符包含 '-','/'或空格
            按空格划分每个参数区域。例如:/p1=a /p2=b
            双引号包含的内容（包括空格）被视作一个整体元素。例如:/p="a  b  c"
            参数区域内各个标识符间可以有空格。例如:/ p = abc
            特殊分隔符号和解析逻辑可使用ParseParamsCondition参数定制
            </summary>
            <param name="sParams">参数行</param>
            <param name="ppp">参数解析策略,可为null</param>
            <returns>参数输出列表</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.ParamsHelper.ParseParams(System.String,PT.Toolkit.Portable.ParamsHelper.ParseParamsPolicy,PT.Toolkit.Portable.ProtoParamList)">
            <summary>
            解析传入的参数行并填写入参数列表。默认赋值标识符为 '='。默认参数开始标识符包含 '-','/'或空格
            按空格划分每个参数区域。例如:/p1=a /p2=b
            双引号包含的内容（包括空格）被视作一个整体元素。例如:/p="a  b  c"
            参数区域内各个标识符间可以有空格。例如:/ p = abc
            特殊分隔符号和解析逻辑可使用ParseParamsCondition参数定制
            </summary>
            <param name="sParams">参数行</param>
            <param name="ppp">参数解析策略,可为null</param>
            <param name="Params">参数输出列表</param>
        </member>
        <member name="M:PT.Toolkit.Portable.ParamsHelper.InternalParseSingleParamPair(System.String,System.String,PT.Toolkit.Portable.ParamsHelper.ParseParamsPolicy,PT.Toolkit.Portable.ProtoParamList)">
            <summary>
            解析一个单独参数填入列表
            </summary>
            <param name="paramName">参数名</param>
            <param name="paramValue">参数值</param>
            <param name="ppp">参数解析策略</param>
            <param name="Params">参数输出列表</param>
        </member>
        <member name="T:PT.Toolkit.Portable.ParamsHelper.ParseParamsPolicy">
            <summary>
            参数解析策略类
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.ParamsHelper.ParseParamsPolicy.EvalueFlagChars">
            <summary>
            赋值标识字符数组,默认包含 '='
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.ParamsHelper.ParseParamsPolicy.ParamPrefixChars">
            <summary>
            参数开始标识字符数组,默认包含 '-','/' 
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.ParamsHelper.ParseParamsPolicy.ElementSeperateChars">
            <summary>
            元素分隔或两个参数分隔标识字符数组,默认包含 ' ' 
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.ParamsHelper.ParseParamsPolicy.IsMatchDoubleQuote">
            <summary>
            当解析并获取参数名称或参数值时候，如果是双引号开始，是否匹配到双引号结束
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.ParamsHelper.ParseParamsPolicy.IsParamMustStartWithPrefix">
            <summary>
            参数必须以前缀标识为开始标记,默认false
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.ParamsHelper.ParseParamsPolicy.IsMergeSameNameParam">
            <summary>
            解析出来的重复名称的参数是否融合,默认true
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.ParamsHelper.ParseParamsPolicy.IsOverwriteValueWhenMergeSameNameParam">
            <summary>
            重复名称的参数是否融合时,后解析出的参数值是否覆盖原来值,默认true
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.ParamsHelper.ParseParamsPolicy.IsParamNameCaseSensive">
            <summary>
            解析时候参数名称是否大小写敏感,默认true
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.ParamsHelper.ParseParamsPolicy.IsAutoTrimParamNameDoubleQuote">
            <summary>
            是否自动过滤掉参数名称两边的双引号
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.ParamsHelper.ParseParamsPolicy.IsAutoTrimParamValueDoubleQuote">
            <summary>
            是否自动过滤掉参数值两边的双引号
            </summary>
        </member>
        <member name="T:PT.Toolkit.Portable.ParamsHelper.GetCharStatusEnum">
            <summary>
            参数解析字符获取状态枚举
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.ParamsHelper.GetCharStatusEnum.GettingParamPrefix">
            <summary>
            获取参数前缀状态
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.ParamsHelper.GetCharStatusEnum.GettingParamName">
            <summary>
            获取名称状态
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.ParamsHelper.GetCharStatusEnum.GettingParamEvalueFlag">
            <summary>
            获取赋值符号状态
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.ParamsHelper.GetCharStatusEnum.GettingParamValue">
            <summary>
            获取参数值状态
            </summary>
        </member>
        <member name="T:PT.Toolkit.Portable.Message.MessageContent">
            <summary>
            消息内容
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Message.MessageContent.MsgFlag">
            <summary>
            消息标识，自定义，区分不同来源的消息。如果是日志消息，此值应为"log"
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Message.MessageContent.CategoryPath">
            <summary>
            消息分类，自定义
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Message.MessageContent.MsgType">
            <summary>
            消息类型，自定义。
            如果是日志消息，此值应为0:调试信息,1:备案信息,2:警告信息,3:错误信息,4:致命错误信息
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Message.MessageContent.Msg">
            <summary>
            消息主体内容，自定义
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Message.MessageContent.MsgState">
            <summary>
            消息相关对象信息，自定义
            </summary>
        </member>
        <member name="T:PT.Toolkit.Portable.Message.MessageHub">
            <summary>
            信息枢纽类，通过挂接多播委托和调用处理进程内各类消息
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Message.MessageHub.OnMessage">
            <summary>
            信息委托处理绑定实例
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Message.MessageHub._Inst">
            <summary>
            消息枢纽实例
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.Message.MessageHub.InstallMessageHandler(System.Action{PT.Toolkit.Portable.Message.MessageContent})">
            <summary>
            安装消息处理引擎
            </summary>
            <param name="disp"></param>
        </member>
        <member name="M:PT.Toolkit.Portable.Message.MessageHub.UnInstallMessageHandler(System.Action{PT.Toolkit.Portable.Message.MessageContent})">
            <summary>
            卸载消息处理引擎
            </summary>
            <param name="disp"></param>
        </member>
        <member name="M:PT.Toolkit.Portable.Message.MessageHub.Dispose">
            <summary>
            释放委托资源
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.Message.MessageHub.SendMessage(PT.Toolkit.Portable.Message.MessageContent)">
            <summary>
            发送消息
            </summary>
            <param name="mc">信息</param>
        </member>
        <member name="M:PT.Toolkit.Portable.Message.MessageHub.PostMessage(PT.Toolkit.Portable.Message.MessageContent)">
            <summary>
            异步发送消息
            </summary>
            <param name="mc">信息</param>
        </member>
        <member name="M:PT.Toolkit.Portable.Message.MessageHub.PostMessageAsyncCallback(System.IAsyncResult)">
            <summary>
            异步投递消息时回调事件
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:PT.Toolkit.Portable.Message.MessageHub.SendMessage(System.String,System.String,System.Int32,System.String,System.Object)">
            <summary>
            发送消息
            </summary>
            <param name="msgFlag">消息标识类型，自定义，区分不同来源的消息。如果是日志消息，此值应为"log"</param>
            <param name="categoryPath">消息分类，自定义</param>
            <param name="msgType">信息类型，自定义</param>
            <param name="msg">信息内容</param>
            <param name="msgState">消息相关数据对象，自定义</param>
        </member>
        <member name="M:PT.Toolkit.Portable.Message.MessageHub.PostMessage(System.String,System.String,System.Int32,System.String,System.Object)">
            <summary>
            异步发送消息
            </summary>
            <param name="msgFlag">消息标识类型，区分不同来源的消息。如果是日志消息，此值应为"log"</param>
            <param name="categoryPath">消息分类，自定义</param>
            <param name="msgType">信息类型，自定义</param>
            <param name="msg">信息内容</param>
            <param name="msgState">消息相关数据对象，自定义</param>
        </member>
        <member name="P:PT.Toolkit.Portable.Message.MessageHub.Inst">
            <summary>
            消息枢纽实例
            </summary>
        </member>
        <member name="T:PT.Toolkit.Portable.Cron.CronParser">
            <summary>
            Cron表达式解析
            </summary>
            <summary>
            Cron表达式解析
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Cron.CronParser.CronHelp">
            <summary>
            Cron表达式帮助信息
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Cron.CronParser.Second">
            <summary>
            秒
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Cron.CronParser.Minute">
            <summary>
            分
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Cron.CronParser.Hour">
            <summary>
            时
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Cron.CronParser.DayofMonth">
            <summary>
            日
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Cron.CronParser.Month">
            <summary>
            月
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Cron.CronParser.DayofWeek">
            <summary>
            周
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Cron.CronParser.Year">
            <summary>
            年
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Cron.CronParser.IsValidExpression">
            <summary>
            未设置表达式或表达式不正确
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.Cron.CronParser.SetExpression(System.String)">
            <summary>
            设置表达式
            </summary>
            <param name="expressionString">Cron表达式</param>
            <returns>非空说明表达式有效</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Cron.CronParser.CheckAfterParse">
            <summary>
            表达式解析后校验
            </summary>
            <returns>返回空串表示校验通过，否则返回错误信息</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Cron.CronParser.GetNextQuartz(System.DateTime)">
            <summary>
            以指定时钟为基准，获取下一次触发时间
            </summary>
            <param name="dt">指定时钟</param>
            <returns>下一次触发时间,无法触发则返回null</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Cron.CronParser.GetNextQuartz">
            <summary>
            以当前系统时钟为基准，获取下一次触发时间
            </summary>
            <returns>下一次触发时间,无法触发则返回null</returns>
        </member>
        <member name="T:PT.Toolkit.Portable.Cron.CronElement">
            <summary>
            计划任务设置条件基类，从此类派生各个时间段设置类
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Cron.CronElement.ProcessMode">
            <summary>
            取值模式
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Cron.CronElement.MeasureValues">
            <summary>
            指定的度量值集合
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Cron.CronElement.LastValue">
            <summary>
            L表达式指定的数值
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Cron.CronElement.IncrementOrgValue">
            <summary>
            递增初始值
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Cron.CronElement.IncrementValue">
            <summary>
            增量值
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Cron.CronElement.ValueMin">
            <summary>
            元素最小值，用于值校验
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Cron.CronElement.ValueMax">
            <summary>
            元素最大值，用于值校验
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Cron.CronElement.ValueSupport_Ignore">
            <summary>
            元素是否支持?
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Cron.CronElement.ValueSupport_L">
            <summary>
            元素是否支持L
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Cron.CronElement.ValueSupport_W">
            <summary>
            元素是否支持W
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Cron.CronElement.ValueSupport_DayofWeekofMonth">
            <summary>
            元素是否支持#
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.Cron.CronElement.CheckAfterParse">
            <summary>
            表达式解析后校验
            </summary>
            <returns>返回空串表示校验通过，否则返回错误信息</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Cron.CronElement.CheckMeasureValuesInRange(System.Int32,System.Int32)">
            <summary>
            检查可选值是否在有效范围
            </summary>
            <param name="iStart">有效范围起始</param>
            <param name="iStop">有效范围截止</param>
            <returns>错误信息</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Cron.CronElement.SetExpression(System.String)">
            <summary>
            解析设置,无效则返回错误信息
            </summary>
            <param name="expressionString"></param>
            <returns></returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Cron.CronElement.GetCronElementProcessMode(System.String)">
            <summary>
            获取元素取值模式
            </summary>
            <param name="expressionString">元素表达式</param>
            <returns>取值模式</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Cron.CronElement.ParseExpression_L(System.String)">
            <summary>
            解析L表达式
            </summary>
            <param name="expressionString">表达式</param>
            <returns>错误信息</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Cron.CronElement.ParseExpression_Increment(System.String)">
            <summary>
            解析增量表达式
            </summary>
            <param name="expressionString">表达式</param>
            <returns>错误信息</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Cron.CronElement.ParseExpression_MultiValue(System.String)">
            <summary>
            解析多值表达式
            </summary>
            <param name="expressionString">表达式</param>
            <returns>错误信息</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Cron.CronElement.CronDayofWeekToRealDayofWeek(System.Int32)">
            <summary>
            将Cron表达式的DayofWeek数值定义偏移后转换为实际的周日历值
            </summary>
            <param name="cronDayofWeek"></param>
            <returns></returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Cron.CronElement.RealDayofWeekToCronDayofWeek(System.Int32)">
            <summary>
            将实际的周日历值偏移后转换为Cron表达式的DayofWeek数值定义
            </summary>
            <param name="realDayofWeek"></param>
            <returns></returns>
        </member>
        <member name="T:PT.Toolkit.Portable.Cron.CronSecond">
            <summary>
            触发规则-秒
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.Cron.CronSecond.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="T:PT.Toolkit.Portable.Cron.CronMinute">
            <summary>
            触发规则-分
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.Cron.CronMinute.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="T:PT.Toolkit.Portable.Cron.CronHour">
            <summary>
            触发规则-时
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.Cron.CronHour.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="T:PT.Toolkit.Portable.Cron.CronDayofMonth">
            <summary>
            触发规则-月中的某天
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.Cron.CronDayofMonth.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="T:PT.Toolkit.Portable.Cron.CronMonth">
            <summary>
            触发规则-月
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.Cron.CronMonth.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="T:PT.Toolkit.Portable.Cron.CronDayofWeek">
            <summary>
            触发规则-周中的某天
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.Cron.CronDayofWeek.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="T:PT.Toolkit.Portable.Cron.CronYear">
            <summary>
            触发规则-年
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.Cron.CronYear.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="T:PT.Toolkit.Portable.StringCustomParseScene`1">
            <summary>
            自定义模式时使用的解析场景
            </summary>
            <typeparam name="T">解析过程中中介类的类型</typeparam>
        </member>
        <member name="F:PT.Toolkit.Portable.StringCustomParseScene`1.IsEndOfContent">
            <summary>
            是否已经到内容最后
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.StringCustomParseScene`1.CurrentChar">
            <summary>
            当前字符
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.StringCustomParseScene`1.CurrentCharIndex">
            <summary>
            当前字符在内容中的索引位置
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.StringCustomParseScene`1.CallerState">
            <summary>
            调用者在开始解析时传入的参数
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.StringCustomParseScene`1.TerminateParsing">
            <summary>
            回调过程设置为true后将终止解析
            </summary>
        </member>
        <member name="T:PT.Toolkit.Portable.StringParser">
            <summary>
            提供对字符串的格式解析
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.StringParser.MA">
            <summary>
            当前使用的匹配适配器，每次调用实例的MatchWords或MatchWordsUntil后状态被改变
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.StringParser.CustomParse``1(System.String,``0,System.Action{PT.Toolkit.Portable.StringCustomParseScene{``0}})">
            <summary>
            开始解析整个字符串内容
            </summary>
            <typeparam name="T">解析过程中中介类的类型</typeparam>
            <param name="sContent">解析内容</param>
            <param name="initialState">中介类实例初始值</param>
            <param name="onParsing">按字符回调事件</param>
        </member>
        <member name="M:PT.Toolkit.Portable.StringParser.CustomParse``1(System.String,``0,System.Action{PT.Toolkit.Portable.StringCustomParseScene{``0}},System.Int32,System.Int32)">
            <summary>
            开始解析字符串内容的指定范围
            </summary>
            <typeparam name="T">解析过程中中介类的类型</typeparam>
            <param name="sContent">解析内容</param>
            <param name="initialState">中介类实例初始值</param>
            <param name="onParsing">按字符回调事件</param>
            <param name="startIndex">解析范围的开始位置</param>
            <param name="stopIndex">解析范围的结束位置</param>
        </member>
        <member name="M:PT.Toolkit.Portable.StringParser.EOS(System.Int32)">
            <summary>
            是否到末尾
            </summary>
            <param name="iPos">判定位置</param>
            <returns></returns>
        </member>
        <member name="M:PT.Toolkit.Portable.StringParser.Length">
            <summary>
            缓冲区数据长度
            </summary>
            <returns></returns>
        </member>
        <member name="M:PT.Toolkit.Portable.StringParser.GetChar(System.Int32,System.Boolean)">
            <summary>
            取得指定位置的字符
            </summary>
            <param name="iPos">位置</param>
            <param name="bConvertCommentedChar">是否转换被注释的字符为空格，在被解析的串不考虑注释情况下此参数无用。</param>
            <returns></returns>
        </member>
        <member name="M:PT.Toolkit.Portable.StringParser.GetString(System.Int32,System.Int32,System.Boolean)">
            <summary>
            从内部缓冲区取得指定范围内的字符串
            </summary>
            <param name="iBegin">开始截取位置</param>
            <param name="iLen">截取长度</param>
            <param name="bConvertCommentedChar">是否转换被注释的字符为空格，在被解析的串不考虑注释情况下此参数无用。</param>
            <returns></returns>
        </member>
        <member name="M:PT.Toolkit.Portable.StringParser.GetValidKeyword(System.Int32,System.String,System.Int32@,System.Int32@)">
            <summary>
            从指定位置开始截取关键字
            </summary>
            <param name="iBeginPos">开始位置</param>
            <param name="sKeywordSeperateChars">关键字分隔判定符号集合</param>
            <param name="iRealStartPos">第一次出现非分隔符的字符位置</param>
            <param name="iRealEndPos">最后一次出现非分隔符的字符位置</param>
            <returns></returns>
        </member>
        <member name="M:PT.Toolkit.Portable.StringParser.GetValidKeyword(System.Char[],System.Int32,System.String,System.Int32@,System.Int32@,PT.Toolkit.Portable.Collections.IntCollection,PT.Toolkit.Portable.Collections.IntCollection)">
            <summary>
            从指定位置开始截取关键字
            </summary>
            <param name="cbuf">缓冲数据</param>
            <param name="iBeginPos">开始位置</param>
            <param name="sKeywordSeperateChars">关键字分隔判定符号集合</param>
            <param name="iRealStartPos">第一次出现非分隔符的字符位置</param>
            <param name="iRealEndPos">最后一次出现非分隔符的字符位置</param>
            <param name="commentCollection">注释区域集合</param>
            <param name="stringAreaCollection">字符串区域集合</param>
            <returns></returns>
        </member>
        <member name="M:PT.Toolkit.Portable.StringParser.IsComment(System.Int32)">
            <summary>
            判断指定位置是否是代码注释
            </summary>
            <param name="iPos"></param>
            <returns></returns>
        </member>
        <member name="M:PT.Toolkit.Portable.StringParser.IsNotEmptyString(System.String[])">
            <summary>
            判断所有数组是否都为非空字符串
            </summary>
            <param name="sFlags"></param>
            <returns></returns>
        </member>
        <member name="M:PT.Toolkit.Portable.StringParser.MarkComment(System.Boolean)">
            <summary>
            解析并记忆注释内容
            </summary>
            <param name="bLineCommentCaseSensitive">行注释标记是否大小写敏感</param>
        </member>
        <member name="M:PT.Toolkit.Portable.StringParser.MatchString(System.Char[],System.Int32,System.String,System.Boolean)">
            <summary>
            判断字符数组cs的从iindex位置开始是否匹配字符串s
            </summary>
            <param name="cs"></param>
            <param name="iIndex">缓冲判断开始位置</param>
            <param name="s"></param>
            <param name="bCaseSensitive"></param>
            <returns></returns>
        </member>
        <member name="M:PT.Toolkit.Portable.StringParser.MatchWords(System.Char[],System.Int32,System.Int32,System.String,System.String,System.String,System.Boolean,System.Boolean,System.String,PT.Toolkit.Portable.StringParser.MatchConstStringOption,System.Char)">
            <summary>
            从缓冲区指定位置开始按顺序匹配指定的字符串，参数见其他同名函数说明
            </summary>
            <param name="cbuf"></param>
            <param name="iBeginPos"></param>
            <param name="iEndPos"></param>
            <param name="pattern"></param>
            <param name="sCharsGroup"></param>
            <param name="sWordsGroup"></param>
            <param name="bCaseSensitive"></param>
            <param name="bMustMatchAllInputChar"></param>
            <param name="sFinalCalcExpression"></param>
            <param name="mcso">匹配串时碰到常量字符串的处理方式</param>
            <param name="mscoChar">碰到常量字符串如果处理方式为替换处理的时候的指定字符</param>
            <returns></returns>
        </member>
        <member name="M:PT.Toolkit.Portable.StringParser.MatchWords(System.Int32,System.Int32,System.String,System.String,System.String,System.Boolean,System.Boolean,System.String,PT.Toolkit.Portable.StringParser.MatchConstStringOption,System.Char)">
            <summary>
            从缓冲区指定位置开始按顺序匹配指定的字符串，参数见其他同名函数说明
            </summary>
            <param name="iBeginPos"></param>
            <param name="iEndPos"></param>
            <param name="pattern"></param>
            <param name="sCharsGroup"></param>
            <param name="sWordsGroup"></param>
            <param name="bCaseSensitive"></param>
            <param name="bMustMatchAllInputChar"></param>
            <param name="sFinalCalcExpression"></param>
            <param name="mcso">匹配串时碰到常量字符串的处理方式</param>
            <param name="mscoChar">碰到常量字符串如果处理方式为替换处理的时候的指定字符</param>
            <returns></returns>
        </member>
        <member name="M:PT.Toolkit.Portable.StringParser.MatchWordsUntilEnd(System.Int32,System.Int32,System.String,System.String,System.String,System.Boolean,System.Boolean,System.String,PT.Toolkit.Portable.StringParser.MatchConstStringOption,System.Char,System.Int32@)">
            <summary>
            从缓冲区指定位置开始按顺序匹配指定的字符串,如果匹配不成功则从指定位置的下一个位置继续匹配，直到成功或到指定位置
            </summary>
            <param name="iBeginPos">开始位置</param>
            <param name="iEndPos">允许匹配的最大位置</param>
            <param name="pattern">匹配描述模板</param>
            <param name="sCharsGroup">指定的匹配符号组</param>
            <param name="sWordsGroup">指定的匹配单词组</param>
            <param name="bCaseSensitive">被精确匹配的字符是否大小写敏感</param>
            <param name="bMustMatchAllInputChar">是否必须匹配所有输入字符</param>
            <param name="sFinalCalcExpression">终结表达式</param>
            <param name="mcso">匹配串时碰到常量字符串的处理方式</param>
            <param name="mscoChar">碰到常量字符串如果处理方式为替换处理的时候的指定字符</param>
            <param name="iMatchedBeginPos">如果成功，存放开始匹配位置</param>
            <returns></returns>
        </member>
        <member name="M:PT.Toolkit.Portable.StringParser.MatchWords(System.Int32,System.Int32,PT.Toolkit.Portable.StringParser.MatchConstStringOption,System.Char)">
            <summary>
            使用当前内置的匹配模板对内置缓冲区的范围进行匹配
            </summary>
            <param name="iBeginPos"></param>
            <param name="iEndPos"></param>
            <param name="mcso">匹配串时碰到常量字符串的处理方式</param>
            <param name="mscoChar">碰到常量字符串如果处理方式为替换处理的时候的指定字符</param>
            <returns></returns>
        </member>
        <member name="M:PT.Toolkit.Portable.StringParser.MatchWords(System.Char[],System.Int32,System.Int32,PT.Toolkit.Portable.StringParser.MatchAdapter,PT.Toolkit.Portable.Collections.IntCollection,PT.Toolkit.Portable.Collections.IntCollection,PT.Toolkit.Portable.StringParser.MatchConstStringOption,System.Char)">
            <summary>
            使用适配器匹配缓冲
            </summary>
            <param name="cbuf">字符缓冲区</param>
            <param name="iBeginPos">开始匹配位置</param>
            <param name="iEndPos">允许匹配的最后位置</param>
            <param name="ma">适配器</param>
            <param name="commentCollection">缓冲中注释位置集合</param>
            <param name="stringAreaCollection">缓冲中字符串位置集合</param>
            <param name="mcso">匹配串时碰到常量字符串的处理方式</param>
            <param name="mscoChar">碰到常量字符串如果处理方式为替换处理的时候的指定字符</param>
            <returns></returns>
        </member>
        <member name="M:PT.Toolkit.Portable.StringParser.MatchWords(System.Char[],System.Int32,System.Int32,System.String,System.String,System.String,System.Boolean,System.Boolean,System.String,PT.Toolkit.Portable.Collections.IntCollection,PT.Toolkit.Portable.Collections.IntCollection,PT.Toolkit.Portable.StringParser.MatchConstStringOption,System.Char)">
            <summary>
            从缓冲区指定位置开始按顺序匹配指定的字符串
            </summary>
            <param name="cbuf">缓冲区</param>
            <param name="iBeginPos">开始匹配位置</param>
            <param name="iEndPos">允许匹配最大位置</param>
            <param name="pattern">准备匹配的格式化字符串，见MatchAdapter类</param>
            <param name="sCharsGroup">指定的匹配符号组，见MatchAdapter类</param>
            <param name="sWordsGroup">指定的匹配单词组，见MatchAdapter类</param>
            <param name="bCaseSensitive">被精确匹配的字符是否大小写敏感</param>
            <param name="bMustMatchAllInputChar">是否必须匹配所有输入字符</param>
            <param name="sFinalCalcExpression">终结表达式，见MatchAdapter定义</param>
            <param name="commentCollection">注释区域集合可为null</param>
            <param name="stringAreaCollection">常量字符串位置区域集合可为null</param>
            <param name="mcso">匹配串时碰到常量字符串的处理方式</param>
            <param name="mscoChar">碰到常量字符串如果处理方式为替换处理的时候的指定字符</param>
            <returns>成功返回true</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.StringParser.Prepare(System.String)">
            <summary>
            准备解析
            </summary>
            <param name="sContent">内容</param>
        </member>
        <member name="M:PT.Toolkit.Portable.StringParser.Prepare(System.String,System.Char,System.Char,System.String,System.String,System.String,System.Boolean)">
            <summary>
            准备解析
            </summary>
            <param name="sContent">内容</param>
            <param name="cStringStartFlag">字符串开始标记</param>
            <param name="cEscape">字符串的转意字符</param>
            <param name="sSegmentCommentStartFlag">段落注释开始标记"\r\n"间隔</param>
            <param name="sSegmentCommentEndFlag">段落注释结束标记"\r\n"间隔</param>
            <param name="sLineCommentFlag">行注释标记"\r\n"间隔</param>
            <param name="bLineCommentCaseSensitive">行注释标记是否大小写敏感</param>
        </member>
        <member name="T:PT.Toolkit.Portable.StringParser.MatchConstStringOption">
            <summary>
            匹配串时碰到常量字符串的处理方式
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.StringParser.MatchConstStringOption.TreatAsFault">
            <summary>
            碰到常量字符串则匹配失败
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.StringParser.MatchConstStringOption.TreatAsCharAll">
            <summary>
            常量字符串被认为一个指定的字符使用，包括两边的标记符号
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.StringParser.MatchConstStringOption.TreatAsCharInner">
            <summary>
            常量字符串被认为一个指定的字符使用，不包括两边的标记符号
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.StringParser.MatchConstStringOption.TreatAsOriginal">
            <summary>
            按正常判断
            </summary>
        </member>
        <member name="T:PT.Toolkit.Portable.StringParser.MatchAdapter">
            <summary>
            匹配适配器
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.StringParser.MatchAdapter.RET_FAULT">
            <summary>
            失败，Match函数返回值
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.StringParser.MatchAdapter.RET_OK">
            <summary>
            成功，Match函数返回值
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.StringParser.MatchAdapter.RET_CONTINUE">
            <summary>
            继续，Match函数返回值
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.StringParser.MatchAdapter.RET_RELOCATE">
            <summary>
            缓冲需要重定位，Match函数返回值，定位位置通过GetCurrentMatchedCount获得
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.StringParser.MatchAdapter.ElementList">
            <summary>
            元素列表
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.StringParser.MatchAdapter.m_CaseSensitive">
            <summary>
            固定匹配字符是否大小写敏感
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.StringParser.MatchAdapter.m_MustMatchAllInputChar">
            <summary>
            是否必须匹配所有传入的字符，这将影响对元素列表结尾处是成功还是失败的判断
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.StringParser.MatchAdapter.m_FinalCalcExpression">
            <summary>
            最终表达式，可以为空
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.StringParser.MatchAdapter.Init(System.String,System.String,System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            初始化适配器
            </summary>
            <param name="pattern">匹配模板。
            由多个'%a[b]'组成，'%'为通配符，方括号及内部元素为可选。
            -a为控制标记字符，有效值为
            ----（'%'：即匹配'%'本身，此时b不选）
            ----（'s'：匹配指定的分隔符号）
            ----（'S'：匹配指定的分隔符号，不区分大小写）
            ----（'w'：类似s，但匹配指定的分隔词，词之间用','分割）
            ----（'W'：类似s，但匹配指定的分隔词，词之间用','分割，不区分大小写）
            ----（'n'：代表匹配数字0-9）
            ----（'l'：代表匹配小写字母a-z）
            ----（'L'：代表匹配大写字母A-Z）
            ----（'c'：代表匹配大小写字母A-Z a-z）
            ----（'t'：代表匹配传统的分割符号:空格符和制表符号）
            ----（'T'：代表匹配传统的分割符号:空格符和制表符号和回车符号和换行符号）
            ----（'E'：代表禁止匹配任何字符，一般放于末尾作为限制必须与m_MustMatchAllInputChar=true结合才能有效）
            ----（'*'：代表后边匹配任意字符）
            -[b]为控制标记字符限制属性描述集合，由一个或多个属性组成如G=0,R=1-2
            ----属性G，当控制字符为s或S时有效，指示sAllowedSeperateChars参数传入的分割字符组号，从0开始，缺省为0
            ----属性R，期望匹配字符的出现次数范围，格式"[k-m]"，km为非负整数，表示最少出现k次，最多出现m次，m可以为字符'n'，表示无限大小，缺省值为'[1-n]'，R的特殊表达方法R=5等价于5-n，R=-8等价于R=1-8
            ----属性I，Inverted反值判定，有效值为0和1，默认为0，该元素正常匹配结果取反作为判断要素。如%l[I=1]则表示所有非小写字符才允许匹配。此属性限制在如下控制字时候才有效:s,S,n,l,L,c,t,T
            ----属性N，给该匹配元素定义的名字，该名字可用于后期综合表达式的判断
            举例："sing%0sSyst%0s[0-3]em;%*[500]"表示sing+至少一个0组的分割符+Syst+至少0个并且最多3个0组的分割符+em;+至少500个任意字符
            举例：pattern="%s[G=0,R=0-1,N=符号位]%n[R=1-10,N=整数]%s[G=1,R=0-1,N=小数点]%n[R=1-10,N=小数]%E",sAllowedSeperateChars="-%.",bMustMatchAllInputChar=true搭配可以匹配浮点数(精度须调整)
            %s[G=0,R=1-2,N=a]
            </param>
            <param name="sAllowedSeperateChars">字符串间允许出现的分隔符号包含多组用'%',分隔用%转义本身，例如：",\r\n%abc%%"，第0组为",\r\n"，第1组为"abc%"</param>
            <param name="sAllowedSeperateWords">字符串间允许出现的分隔单词，组内单词用','分割，包含多组用'%',分隔用%转义本身，例如：",\r\n%int,float%"，第0组为",\r\n"，第1组为"int"和"float"</param>
            <param name="bCaseSensitive">被精确匹配的字符是否大小写敏感，这里指的是固定字符，元素匹配的字符不包括在内</param>
            <param name="bMustMatchAllInputChar">是否必须匹配所有传入的字符，这将影响对元素列表结尾处是成功还是失败的判断</param>
            <param name="sFinalCalcExpression">后期判断表达式，可以为空</param>
            计算后期表达式是否符合条件，通过元素的名字代表他们各自匹配的字符数量进行运算
            如构造函数的pattern="%s[G=0,R=0-1,N=a]%n[R=0-10,N=b]"，解析后两个匹配元素的名字分别为a,b
            sFinalCalcExpression="a+b=2"表示元素a匹配的字符数与元素b匹配的字符数必须等于2
        </member>
        <member name="M:PT.Toolkit.Portable.StringParser.MatchAdapter.DeSerialisePattern(System.String)">
            <summary>
            反序列化匹配表达式
            </summary>
            <param name="pattern"></param>
        </member>
        <member name="M:PT.Toolkit.Portable.StringParser.MatchAdapter.GetStatus">
            <summary>
            取得当前状态
            </summary>
            <returns></returns>
        </member>
        <member name="M:PT.Toolkit.Portable.StringParser.MatchAdapter.Clear">
            <summary>
            清除所有元素并重置匹配状态
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.StringParser.MatchAdapter.SerialisePattern">
            <summary>
            生成模板
            </summary>
            <returns></returns>
        </member>
        <member name="M:PT.Toolkit.Portable.StringParser.MatchAdapter.FindElementByName(System.String)">
            <summary>
            根据名称查找匹配元素
            </summary>
            <param name="sElementName"></param>
            <returns></returns>
        </member>
        <member name="M:PT.Toolkit.Portable.StringParser.MatchAdapter.GetElementMatchedCount(System.String)">
            <summary>
            在成功匹配后取得某个元素匹配字符的数目
            </summary>
            <param name="sElementName">元素名称</param>
            <returns></returns>
        </member>
        <member name="M:PT.Toolkit.Portable.StringParser.MatchAdapter.GetElementMatchedCountAfter(System.String)">
            <summary>
            在成功匹配后取得从开始到某个元素匹配字符的总数目
            </summary>
            <param name="sElementName">元素名称</param>
            <returns></returns>
        </member>
        <member name="M:PT.Toolkit.Portable.StringParser.MatchAdapter.GetElementMatchedCountBefore(System.String)">
            <summary>
            在成功匹配后取得从开始到某个元素之前匹配字符的总数目
            </summary>
            <param name="sElementName">元素名称</param>
            <returns></returns>
        </member>
        <member name="M:PT.Toolkit.Portable.StringParser.MatchAdapter.ContainsBlurMathElement">
            <summary>
            是否包含模糊匹配元素
            </summary>
            <returns></returns>
        </member>
        <member name="M:PT.Toolkit.Portable.StringParser.MatchAdapter.GetCurrentMatchedCount">
            <summary>
            取得适配器当前匹配的字符总数
            </summary>
            <returns></returns>
        </member>
        <member name="M:PT.Toolkit.Portable.StringParser.MatchAdapter.Match(System.Char)">
            <summary>
            0:失败　1:成功 2准备判断下一字符 3重定位缓冲
            </summary>
            <param name="c"></param>
            <returns>0:失败　1:成功 2准备判断下一字符3重定位缓冲</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.StringParser.MatchAdapter.ConsideratelyMatch">
            <summary>
            当当前匹配处于模糊匹配并且是最后一个匹配适配器元素并且可以认为成功时返回真
            </summary>
            <returns></returns>
        </member>
        <member name="M:PT.Toolkit.Portable.StringParser.MatchAdapter.CalcFinalMatchExpression">
            <summary>
            计算后期表达式是否符合条件，通过元素的名字代表他们各自匹配的字符数量进行运算
            如构造函数的pattern="%s[G=0,R=0-1,N=a]%n[R=0-10,N=b]"，解析后两个匹配元素的名字分别为a,b
            sExp="a+b=2"表示元素a匹配的字符数与元素b匹配的字符数必须等于2
            </summary>
            <returns></returns>
        </member>
        <member name="M:PT.Toolkit.Portable.StringParser.MatchAdapter.ResetMatchState">
            <summary>
            重置状态数据，准备下一系列匹配
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.StringParser.MatchAdapterCalcer.PrepareExpression(System.String)">
            <summary>
            准备表达式
            返回值：/// VarNamesList：（输出）表达式运算需要的参数名列表
            参数：
            strExpression：表达式串
            举例：
            ArrayList a=  PrepareExpression("i==5");
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.StringParser.MatchAdapterCalcer.ConvertExpression(System.String)">
            <summary>
            要求表达式以空格\t作为分隔符
            转换表达式折分为：
            变量及数值 ,变量不允许为@
            字符串“”
            运算符号
            括号{包括（、）}
            </summary>
            <param name="sExpression"></param>
            <returns></returns>
        </member>
        <member name="M:PT.Toolkit.Portable.StringParser.MatchAdapterCalcer.ConvertExpression(System.Collections.Generic.List{System.Object},System.String,System.String)">
            <summary>
            对返回的表达式，已经分好放于ArrayList中的变量进行替换为实际常量
            </summary>
            <param name="alExpression"></param>
            <param name="mapVar"></param>
            <param name="mapValue"></param>
            <returns></returns>
        </member>
        <member name="M:PT.Toolkit.Portable.StringParser.MatchAdapterCalcer.ConvertExpression(System.Collections.Generic.List{System.Object},System.String[],System.String[])">
            <summary>
            对返回的表达式，已经分好放于ArrayList中的变量进行替换为实际常量
            </summary>
            <param name="alExpression"></param>
            <param name="mapVar"></param>
            <param name="mapValue"></param>
            <returns></returns>
        </member>
        <member name="M:PT.Toolkit.Portable.StringParser.MatchAdapterCalcer.Find_First_RightBracket(System.Collections.Generic.List{System.Object})">
            <summary>
            找出第一个闭括号
            </summary>
            <param name="alExpression"></param>
            <returns></returns>
        </member>
        <member name="M:PT.Toolkit.Portable.StringParser.MatchAdapterCalcer.Find_Near_LeftBracket(System.Collections.Generic.List{System.Object},System.Int32)">
            <summary>
            找出匹配的开括号
            </summary>
            <param name="alExpression"></param>
            <param name="iRightBracket"></param>
            <returns></returns>
        </member>
        <member name="M:PT.Toolkit.Portable.StringParser.MatchAdapterCalcer.ConvertToPostfix(System.Collections.Generic.List{System.Object})">
            <summary>
            中缀表达式转换为后缀表达式
            </summary>
            <param name="alexpression"></param>
            <returns></returns>
        </member>
        <member name="M:PT.Toolkit.Portable.StringParser.MatchAdapterCalcer.ComputePostfix(System.Collections.Generic.List{System.Object})">
            <summary>
            计算后缀表达式
            </summary>
            <param name="alexpression"></param>
            <returns></returns>
        </member>
        <member name="T:PT.Toolkit.Portable.StringParser.MatchAdapterCalcer.ArrayListCopy">
            <summary>
            ArrayList子集操作
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.StringParser.MatchAdapterCalcer.ArrayListCopy.CopyBewteenTo(System.Collections.Generic.List{System.Object},System.Int32,System.Int32)">
            <summary>
            返回ArrayList子集{L--R}内容
            </summary>
            <param name="alist"></param>
            <param name="iLeft"></param>
            <param name="iRight"></param>
            <returns></returns>
        </member>
        <member name="M:PT.Toolkit.Portable.StringParser.MatchAdapterCalcer.ArrayListCopy.CopyNotBetweenTo(System.Collections.Generic.List{System.Object},System.Int32,System.Int32)">
            <summary>
            返回ArrayList子集{L--R}的补集内容
            </summary>
            <param name="alist"></param>
            <param name="iLeft"></param>
            <param name="iRight"></param>
            <returns></returns>
        </member>
        <member name="M:PT.Toolkit.Portable.StringParser.MatchAdapterCalcer.ArrayListCopy.GetSubStringCount(System.String,System.String)">
            <summary>
            统计字符串sin在str中出现的次数
            </summary>
            <param name="str"></param>
            <param name="sin"></param>
            <returns></returns>
        </member>
        <member name="T:PT.Toolkit.Portable.StringParser.MatchAdapterCalcer.OperatorMap">
            <summary>
            算符的优先级实体
            </summary>
        </member>
        <member name="T:PT.Toolkit.Portable.StringParser.MatchElement">
            <summary>
            匹配元素
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.StringParser.MatchElement.MCT_FIXEDCHAR">
            <summary>
            匹配固定字符串
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.StringParser.MatchElement.MCT_CHARINGROUP">
            <summary>
            匹配字符在分隔组里
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.StringParser.MatchElement.MCT_CHARINGROUP_BLUNT">
            <summary>
            匹配字符在分隔组里，不区分大小写
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.StringParser.MatchElement.MCT_WORDINGROUP">
            <summary>
            匹配单词在分隔组里
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.StringParser.MatchElement.MCT_WORDINGROUP_BLUNT">
            <summary>
            匹配单词在分隔组里，不区分大小写
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.StringParser.MatchElement.MCT_NUMBER">
            <summary>
            匹配字符必须是数字
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.StringParser.MatchElement.MCT_LOWLETTER">
            <summary>
            匹配字符必须是小写字母
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.StringParser.MatchElement.MCT_UPLETTER">
            <summary>
            匹配字符必须是大写字母
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.StringParser.MatchElement.MCT_LETTER">
            <summary>
            匹配字符必须是字母
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.StringParser.MatchElement.MCT_SEP">
            <summary>
            匹配空格、制表符
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.StringParser.MatchElement.MCT_SEPEX">
            <summary>
            匹配空格、制表符、回车、换行
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.StringParser.MatchElement.MCT_ANYCHAR">
            <summary>
            匹配任意字符
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.StringParser.MatchElement.MCT_END">
            <summary>
            禁止匹配任意字符
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.StringParser.MatchElement.MR_FAULT">
            <summary>
            失败
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.StringParser.MatchElement.MR_OK">
            <summary>
            成功
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.StringParser.MatchElement.MR_CONTINUE">
            <summary>
            匹配并且继续接受下一输入字符进行匹配
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.StringParser.MatchElement.MatchCharType">
            <summary>
            匹配字符标记
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.StringParser.MatchElement.m_MinOccurs">
            <summary>
            最小出现次数限制，默认为1
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.StringParser.MatchElement.m_MaxOccurs">
            <summary>
            最大出现次数限制，默认无限制
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.StringParser.MatchElement.m_CurrentOccurs">
            <summary>
            当前符合条件的字符出现次数，类型为MCT_SPECIFIEDCHAR时候含义为检索位置
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.StringParser.MatchElement.ElementName">
            <summary>
            为该元素定义的名称
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.StringParser.MatchElement.bInvertedValue">
            <summary>
            是否进行取反判定
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.StringParser.MatchElement.m_SeperateGroupIndex">
            <summary>
            分隔符组号，类型为MCT_INGROUP时候有效
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.StringParser.MatchElement.m_SpecifiedString">
            <summary>
            内置的固定字符串，类型为MCT_SPECIFIEDCHAR或ingroup时候有效
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.StringParser.MatchElement.m_FixedCharCaseSensitive">
            <summary>
            类型为MCT_FIXEDCHAR时候是否大小写敏感
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.StringParser.MatchElement.m_UsedWordIndexCollection">
            <summary>
            已使用字的集合
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.StringParser.MatchElement.SerialisePattern">
            <summary>
            生成模板
            </summary>
            <returns></returns>
        </member>
        <member name="M:PT.Toolkit.Portable.StringParser.MatchElement.GetMatchedCount">
            <summary>
            匹配成功后，该元素匹配的字符数目
            </summary>
            <returns></returns>
        </member>
        <member name="M:PT.Toolkit.Portable.StringParser.MatchElement.ToString">
            <summary>
            重写object.ToString
            </summary>
            <returns></returns>
        </member>
        <member name="M:PT.Toolkit.Portable.StringParser.MatchElement.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.StringParser.MatchElement.ResetMatchState">
            <summary>
            重置状态数据，准备下一系列匹配
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.StringParser.MatchElement.GetControlCharByMCT(System.Int32)">
            <summary>
            根据类型获取控制字符
            </summary>
            <param name="mct"></param>
            <returns></returns>
        </member>
        <member name="M:PT.Toolkit.Portable.StringParser.MatchElement.GetMCTByControlChar(System.Char)">
            <summary>
            根据控制字符获取类型
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:PT.Toolkit.Portable.StringParser.MatchElement.GetMCTDisplayName(System.Int32,System.Boolean)">
            <summary>
            取得元素类型的显示名称
            </summary>
            <param name="MCT"></param>
            <param name="bOpponent">是否取反</param>
            <returns></returns>
        </member>
        <member name="M:PT.Toolkit.Portable.StringParser.MatchElement.GetElement(System.String,System.Int32,System.Int32@,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            获得元素
            </summary>
            <param name="pattern">匹配描述</param>
            <param name="iBegin">开始位置</param>
            <param name="iEnd">结束位置</param>
            <param name="SeperatorGroups">包含分割符号的字符串列表</param>
            <param name="SeperatorWordGroups">包含分割单词的字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:PT.Toolkit.Portable.StringParser.MatchElement.GetElementDetail(System.String,System.Int32,System.Int32@)">
            <summary>
            获取元素所有属性
            </summary>
            <param name="pattern"></param>
            <param name="iBegin">开始位置</param>
            <param name="iEnd">操作结束位置</param>
            <returns></returns>
        </member>
        <member name="M:PT.Toolkit.Portable.StringParser.MatchElement.GetElementProperty(System.String)">
            <summary>
            获取元素属性
            </summary>
            <param name="sProp"></param>
        </member>
        <member name="M:PT.Toolkit.Portable.StringParser.MatchElement.AddElementProperty(System.String@)">
            <summary>
            属性序列化
            </summary>
            <param name="sProp"></param>
        </member>
        <member name="M:PT.Toolkit.Portable.StringParser.MatchElement.GetElementGroupIndexProperty(System.String)">
            <summary>
            获取元素索引组号属性
            </summary>
            <param name="sGroupIndexProp"></param>
        </member>
        <member name="M:PT.Toolkit.Portable.StringParser.MatchElement.GetElementOccursRangeProperty(System.String)">
            <summary>
            获取元素允许字符的出现次数范围属性
            </summary>
            <param name="sOccursRangeProp"></param>
        </member>
        <member name="M:PT.Toolkit.Portable.StringParser.MatchElement.GetRangeValue(System.String,System.Int32)">
            <summary>
            获取范围属性
            </summary>
            <param name="s"></param>
            <param name="iDefault"></param>
            <returns></returns>
        </member>
        <member name="M:PT.Toolkit.Portable.StringParser.MatchElement.MatchCurrentChar(System.Char)">
            <summary>
            判断传入的字符是否符合当前匹配元素的规则并调整内部状态标记
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:PT.Toolkit.Portable.StringParser.MatchElement.ConsideratelyMatch">
            <summary>
            评议当前匹配元素状态是否可以视为通过状态
            </summary>
            <returns></returns>
        </member>
        <member name="M:PT.Toolkit.Portable.StringParser.MatchElement.AccordRange">
            <summary>
            当前出现频率是否符合范围
            </summary>
            <returns></returns>
        </member>
        <member name="M:PT.Toolkit.Portable.StringParser.MatchElement.IsMatch(System.Char)">
            <summary>
            判断传入的字符是否符合当前匹配元素的规则
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:PT.Toolkit.Portable.StringParser.MatchElement.GetRemainNotMatchWordIndex">
            <summary>
            当元素为MCT_WORDINGROUP或 MCT_WORDINGROUP_BLUNT类型时判断时候还有可用的单词索引供匹配
            </summary>
            <returns></returns>
        </member>
        <member name="T:PT.Toolkit.Portable.DataSectionList">
            <summary>
            DataSection集合类
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.DataSectionList.FindItemByName(System.String,System.Boolean)">
            <summary>
            根据名称查找数据段
            </summary>
            <param name="sectionName">子数据段名称</param>
            <param name="isCaseSensitive">是否大小写敏感</param>
            <returns>子数据段</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.DataSectionList.EnsureGetItemByName(System.String,System.Boolean)">
            <summary>
            以'\'为分割符,逐级创建子段并返回子段,如果子段已存在则不创建
            </summary>
            <param name="sectionPathName">路径名称</param>
            <param name="isCaseSensitive">是否大小写敏感</param>
            <returns>DataSection</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.DataSectionList.EnsureGetItemByName(System.String[],System.Int32,System.Boolean)">
            <summary>
            根据名称数组,逐级创建子段并返回子段,如果子段已存在则不创建
            </summary>
            <param name="pathNameArray">路径名称数组</param>
            <param name="arrayIndex">针对当前列表,名称数组的索引位置</param>
            <param name="isCaseSensitive">是否大小写敏感</param>
            <returns>DataSection</returns>
        </member>
        <member name="T:PT.Toolkit.Portable.DateTimeHelper">
            <summary>
            提供对时间和字符串表现形式的转化
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.DateTimeHelper.DateTimeToString(System.DateTime)">
            <summary>
            时间转成字符串
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:PT.Toolkit.Portable.DateTimeHelper.DateTimeFromString(System.String)">
            <summary>
            时间转成字符串
            </summary>
            <param name="sdt">字符串表示的时间 2009-6-10 11:11:30</param>
            <returns></returns>
        </member>
        <member name="M:PT.Toolkit.Portable.DateTimeHelper.RemovePrefixZero(System.String)">
            <summary>
            去掉数字表示形式中前边多余的0
            </summary>
            <param name="snumber"></param>
            <returns></returns>
        </member>
        <member name="M:PT.Toolkit.Portable.DateTimeHelper.CombineDateAndTime(System.DateTime,System.DateTime)">
            <summary>
            将两个DateTime变量的日期值和时间值合并为一个新时间
            </summary>
            <param name="dtDate">日期</param>
            <param name="dtTime">时间</param>
            <returns>新时间</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.DateTimeHelper.IsTimeRangeInteract(System.DateTime,System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            判断两个时间范围是否有交集
            </summary>
            <param name="dtStart1">开始时间1</param>
            <param name="dtEnd1">结束时间1</param>
            <param name="dtStart2">开始时间2</param>
            <param name="dtEnd2">结束时间2</param>
            <returns></returns>
        </member>
        <member name="T:PT.Toolkit.Portable.EnumHelper">
            <summary>
            Enum扩展访问类
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.EnumHelper.GetValues``1">
            <summary>
            获取对应枚举的所有定义
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:PT.Toolkit.Portable.EnumHelper.GetValues(System.Type)">
            <summary>
            获取对应枚举的所有定义
            </summary>
            <param name="enumType"></param>
            <returns></returns>
        </member>
        <member name="T:PT.Toolkit.Portable.Methods">
            <summary>
            公共静态函数类
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.Methods.IsBaseDataType(System.Object)">
            <summary>
            判断对象是否是简单基本类型
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Methods.GetCharValue(System.String,System.Int32)">
            <summary>
            (字符位操作函数)获取字符缓冲区sFlags某一位
            </summary>
            <param name="sFlags">标志串</param>
            <param name="iposition">字符位置，sFlags最左边一位的iposition定为0</param>
            <returns>对应位置字符</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Methods.SetCharValue(System.String@,System.Int32,System.Char)">
            <summary>
            (字符位操作函数)设置字符缓冲区sFlags某一位的值
            </summary>
            <param name="sFlags">标志串</param>
            <param name="iposition">字符位置，sFlags最左边一位的iposition定为0</param>
            <param name="cFlag">值</param>
        </member>
        <member name="M:PT.Toolkit.Portable.Methods.GetBitValue(System.UInt32,System.Int32)">
            <summary>
            (位操作函数)判断uint某一位的值
            </summary>
            <param name="uiFlag">标记值</param>
            <param name="iposition">位置,uint最低位的iposition定为0</param>
            <returns>该位是否为1</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Methods.SetBitValue(System.UInt32@,System.Int32,System.Boolean)">
            <summary>
            (位操作函数)设置uint某一位的值'0','1',
            </summary>
            <param name="uiFlag">标记值</param>
            <param name="iposition">uint最低位的iposition定为0</param>
            <param name="bFlag">true:该位设置为1</param>
        </member>
        <member name="M:PT.Toolkit.Portable.Methods.GetBitValueEx(System.Byte[],System.Int32)">
            <summary>
            (位操作函数)判断缓冲区pFlags某一位的值
            </summary>
            <param name="pFlags">缓冲区</param>
            <param name="iposition">,pFlags最低位的iposition定为0</param>
            <returns>该位是否为1</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Methods.SetBitValueEx(System.Byte[]@,System.Int32,System.Boolean)">
            <summary>
            (位操作函数)设置缓冲区pFlags某一位的值'0','1',
            </summary>
            <param name="pFlags">缓冲区</param>
            <param name="iposition">pFlags最低位的iposition定为0</param>
            <param name="bFlag">true:该位设置为1</param>
        </member>
        <member name="M:PT.Toolkit.Portable.Methods.CopyBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            缓冲区数据拷贝
            </summary>
            <param name="srcDatas"></param>
            <param name="iCopyStart"></param>
            <param name="iLen"></param>
            <param name="targetDatas"></param>
            <param name="iPasteStart"></param>
            <returns></returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Methods.AddReverseBiasToPath(System.String)">
            <summary>
            路径末尾加反斜线\
            </summary>
            <param name="sPath">路径</param>
            <returns>处理后的路径</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Methods.AddPositiveBiasToPath(System.String)">
            <summary>
            路径末尾加正斜线/
            </summary>
            <param name="sPath">路径</param>
            <returns>处理后的路径</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Methods.GetStringSingleByteByLen(System.String,System.Int32)">
            <summary>
            返回指定字节长度的string
            </summary>
            <param name="s">原字符串</param>
            <param name="iLen">截取长度</param>
            <returns>处理后的字符串</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Methods.HtmlEncode(System.String)">
            <summary>
            生成html编码
            </summary>
            <param name="s">将字符串的的超文本敏感字符进行转义</param>
            <returns>处理后的字符串</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Methods.ConsiderValueEqual(System.Double,System.Double,System.Int32)">
            <summary>
            在允许精度误差的情况下判断两值是否相等
            </summary>
            <param name="d1">判断值1</param>
            <param name="d2">判断值2</param>
            <param name="precision">精度，即精确到小数点后的位数</param>
            <returns>true相等，false不相等</returns>
        </member>
        <member name="T:PT.Toolkit.Portable.ProtoParam">
            <summary>
            基础参数,包含参数名称和对应值
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.ProtoParam.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.ProtoParam.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.ProtoParam.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.ProtoParam.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="name">名称</param>
            <param name="value">值</param>
        </member>
        <member name="M:PT.Toolkit.Portable.ProtoParam.CopyFrom(PT.Toolkit.Portable.ProtoParam)">
            <summary>
            从其它实例拷贝数据
            </summary>
            <param name="nvd"></param>
        </member>
        <member name="T:PT.Toolkit.Portable.ProtoParamList">
            <summary>
            ProtoParam集合类
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.ProtoParamList.Add(System.String,System.String)">
            <summary>
            增加参数
            </summary>
            <param name="paramName">参数名</param>
            <param name="paramValue">参数值</param>
        </member>
        <member name="M:PT.Toolkit.Portable.ProtoParamList.MergeOrAdd(System.String,System.String,System.Boolean)">
            <summary>
            更新或增加参数
            </summary>
            <param name="paramName">参数名</param>
            <param name="paramValue">参数值</param>
            <param name="isCaseSensive">是否大小写敏感</param>
        </member>
        <member name="M:PT.Toolkit.Portable.ProtoParamList.GetValueByName(System.String,System.Boolean)">
            <summary>
            根据名称获取值
            </summary>
            <param name="sName">参数名称</param>
            <param name="isCaseSensive">是否大小写敏感</param>
            <returns>返回找到的参数值，如果没有对应参数则返回空串""</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.ProtoParamList.FindItemByName(System.String,System.Boolean)">
            <summary>
            根据名称获取字典
            </summary>
            <param name="sName">参数名称</param>
            <param name="isCaseSensive">是否大小写敏感</param>
            <returns>返回找到的字典，如果没有则返回null</returns>
        </member>
        <member name="T:PT.Toolkit.Portable.StringEncryptor">
            <summary>
            StringEncryptor 的摘要说明。
            </summary>
            <summary>
            类名称：_StringEncryptor
            字符串加密类
            作用：字符串加密，
            密文呈散列形式("abc"和"abcd"的密文无关、无规律可循)，干扰因子（两次对同一字符串"abc"加密生成的密文不同），
            加密后长度为 n=1 + 汉字总数*3 + 字母总数*2
            作者：qinwei
            最后修改时间：2008-12-23
            </summary>
            <summary>
            分布类定义，定义64进制转换
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.StringEncryptor.GenerateRandomKeyTable">
            <summary>
            生成一个随机数的数组，可作为用户自己的密码表
            </summary>
            <returns></returns>
        </member>
        <member name="M:PT.Toolkit.Portable.StringEncryptor.GenerateRandomKeyTableDef">
            <summary>
            生成一个指定长度的数组定义，可放入代码中作为用户自己的密码表
            </summary>
            <returns></returns>
        </member>
        <member name="M:PT.Toolkit.Portable.StringEncryptor.EncryptString(System.String,System.UInt32,System.Byte[])">
            <summary>
            加密字符串
            </summary>
            <param name="strOrg">明文</param>
            <param name="key">用户钥匙，任意正整数</param>
            <param name="userKeyTable">用户提供的密码表可以为null</param>
            <returns>密文</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.StringEncryptor.DeEncryptString(System.String,System.UInt32,System.Byte[])">
            <summary>
            解密字符串
            </summary>
            <param name="strSecret">密文</param>
            <param name="key">用户钥匙，必须与加密时候传入的值相同</param>
            <param name="userKeyTable">用户提供的密码表可以为null，必须与加密时候传入的值相同</param>
            <returns>明文</returns>
        </member>
        <member name="T:PT.Toolkit.Portable.StringEncryptor.Carry64">
            <summary>
            64进制数字和可显示字符的转换
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.StringEncryptor.Carry64.ByteToCarryChar(System.Byte)">
            <summary>
            数字转换为对应64进制的字符 byte应该在63以内
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:PT.Toolkit.Portable.StringEncryptor.Carry64.CarryCharToByte(System.Char)">
            <summary>
            64进制的字符转换为 byte型数字
            </summary>
            <param name="carrychar"></param>
            <returns></returns>
        </member>
        <member name="T:PT.Toolkit.Portable.Collections.IntRangeBlock">
            <summary>
            整数坐标点集合类数据块
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Collections.IntRangeBlock.start">
            <summary>
            开始位置
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Collections.IntRangeBlock.stop">
            <summary>
            结束位置
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.Collections.IntRangeBlock.#ctor(System.Int32)">
            <summary>
            构造
            </summary>
            <param name="coordinate">默认包含点</param>
        </member>
        <member name="M:PT.Toolkit.Portable.Collections.IntRangeBlock.#ctor(System.Int32,System.Int32)">
            <summary>
            构造并指定初始范围
            </summary>
            <param name="iStartCoordinate"></param>
            <param name="iStopCoordinate"></param>
        </member>
        <member name="M:PT.Toolkit.Portable.Collections.IntRangeBlock.Dispose">
            <summary>
            析构-释放所有资源
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.Collections.IntRangeBlock.Contains(System.Int32)">
            <summary>
            是否包含坐标
            </summary>
            <param name="coordinate">坐标</param>
            <returns></returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Collections.IntRangeBlock.CoordinateCount">
            <summary>
            包含的坐标数
            </summary>
            <returns></returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Collections.IntRangeBlock.CalcDistance(System.Int32,System.Int32)">
            <summary>
            计算两点距离
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Collections.IntRangeBlock.BorderForwardWith(System.Int32)">
            <summary>
            判断块的前端是否与坐标相邻
            </summary>
            <param name="coordinate"></param>
            <returns></returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Collections.IntRangeBlock.BorderBackwardWith(System.Int32)">
            <summary>
            判断块的后端是否与坐标相邻
            </summary>
            <param name="coordinate"></param>
            <returns></returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Collections.IntRangeBlock.BorderWith(System.Int32)">
            <summary>
            判断块是否与坐标相邻
            </summary>
            <param name="coordinate"></param>
            <returns></returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Collections.IntRangeBlock.BorderWith(PT.Toolkit.Portable.Collections.IntRangeBlock)">
            <summary>
            判断是否与其他块相邻
            </summary>
            <param name="linearBlock">坐标块</param>
            <returns></returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Collections.IntRangeBlock.IntersectsWith(PT.Toolkit.Portable.Collections.IntRangeBlock)">
            <summary>
            判断是否与其他块相接
            </summary>
            <param name="linearBlock">坐标块</param>
            <returns></returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Collections.IntRangeBlock.IncForward">
            <summary>
            前向范围加1
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.Collections.IntRangeBlock.IncBackward">
            <summary>
            后向范围加1
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.Collections.IntRangeBlock.SubForward">
            <summary>
            前向范围减1
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.Collections.IntRangeBlock.SubBackword">
            <summary>
            后向范围减1
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.Collections.IntRangeBlock.Fuse(PT.Toolkit.Portable.Collections.IntRangeBlock,System.Boolean)">
            <summary>
            将两个块融合
            </summary>
            <param name="linearBlock">坐标块</param>
            <param name="bIgnoreBorderCheck">是否忽略边界检测，如果不忽略并且两个块不相接或不相邻，则返回false并且不进行融合</param>
            <returns></returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Collections.IntRangeBlock.ToString">
            <summary>
            重写ojbect.ToString
            </summary>
            <returns></returns>
        </member>
        <member name="T:PT.Toolkit.Portable.Collections.IntCollection">
            <summary>
            整数坐标点集合类,适合进行数量庞大而对存储空间要求尽量小的整数操作,当集合中的数值比较连续而非离散时尤其明显
            ,所有对成员的访问是线程安全的
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Collections.IntCollection.Blocks">
            <summary>
            数据块集合
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Collections.IntCollection.m_CoordinateCount">
            <summary>
            坐标总数量
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.Collections.IntCollection.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.Collections.IntCollection.Dispose">
            <summary>
            析构-释放所有资源
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.Collections.IntCollection.Clear">
            <summary>
            清除所有块标记
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.Collections.IntCollection.FuseInternal(PT.Toolkit.Portable.Collections.IntRangeBlock,System.Int32)">
            <summary>
            内部融合
            </summary>
            <param name="linearBlock">另一个点结合</param>
            <param name="iIndex"></param>
        </member>
        <member name="M:PT.Toolkit.Portable.Collections.IntCollection.Add(System.Int32)">
            <summary>
            向集合中添加一个坐标
            </summary>
            <param name="coordinate">一维坐标</param>
        </member>
        <member name="M:PT.Toolkit.Portable.Collections.IntCollection.AddRange(System.Int32[])">
            <summary>
            向集合中添加坐标数组
            </summary>
            <param name="coordinates">坐标数组</param>
        </member>
        <member name="M:PT.Toolkit.Portable.Collections.IntCollection.AddRange(System.Int32,System.Int32)">
            <summary>
            向集合中添加范围坐标
            </summary>
            <param name="iStartCoordinate">开始坐标</param>
            <param name="iStopCoordinate">结尾坐标</param>
        </member>
        <member name="M:PT.Toolkit.Portable.Collections.IntCollection.RemoveRange(System.Int32,System.Int32)">
            <summary>
            删除指定范围内的坐标
            </summary>
            <param name="iStartCoordinate">开始坐标</param>
            <param name="iStopCoordinate">结尾坐标</param>
        </member>
        <member name="M:PT.Toolkit.Portable.Collections.IntCollection.Remove(System.Int32)">
            <summary>
            从集合中删除一个坐标
            </summary>
            <param name="coordinate">要删除的坐标</param>
        </member>
        <member name="M:PT.Toolkit.Portable.Collections.IntCollection.GetMinCoordinate">
            <summary>
            获得最小坐标点
            </summary>
            <returns>最小坐标或null</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Collections.IntCollection.GetMaxCoordinate">
            <summary>
            获得最大坐标点
            </summary>
            <returns>最大坐标或null</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Collections.IntCollection.GetPrevCoordinate(System.Int32)">
            <summary>
            获得指定坐标的前一坐标点
            </summary>
            <param name="coordinate">参考坐标</param>
            <returns>前一坐标或null</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Collections.IntCollection.GetNextCoordinate(System.Int32)">
            <summary>
            获得指定坐标的下一坐标点
            </summary>
            <param name="coordinate">参考坐标</param>
            <returns>下一坐标或null</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Collections.IntCollection.GetNextUnavailableCoordinate(System.Int32)">
            <summary>
            在集合中从指定坐标开始查找最近的一个不包含在集合的坐标
            </summary>
            <param name="coordinate">坐标</param>
            <returns>一个不包含在集合的最近的坐标</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Collections.IntCollection.Contains(System.Int32)">
            <summary>
            是否包含坐标
            </summary>
            <param name="coordinate">坐标</param>
            <returns>是否包含</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Collections.IntCollection.ContainsInternal(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            判断坐标在集合中的位置
            </summary>
            <param name="coordinate">坐标</param>
            <param name="relPrevBlockIndex">如果集合中不包含该坐标,存放与该坐标最近的前向坐标块索引</param>
            <param name="relNextBlockIndex">如果集合中不包含该坐标,存放与该坐标最近的后向坐标块索引</param>
            <returns>返回值为包含该坐标的坐标块索引,返回非负数说明包含指定坐标</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Collections.IntCollection.IsEmpty">
            <summary>
            判断集合是否为空
            </summary>
            <returns>是否为空</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Collections.IntCollection.BlockCount">
            <summary>
            包含的坐标块的数量
            </summary>
            <returns>数量</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Collections.IntCollection.GetBlockRange(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            取得某个坐标集合块元素的范围，调用此函数需要注意，当对集合坐标进行操作时候，它包含的块会发生变化。
            </summary>
            <param name="iBlockIndex">元素块索引</param>
            <param name="iStart">元素块范围</param>
            <param name="iStop">元素块范围</param>
        </member>
        <member name="M:PT.Toolkit.Portable.Collections.IntCollection.GetBlockIndexByCoordinate(System.Int32)">
            <summary>
            获得包含某个坐标的块的列表位置
            </summary>
            <param name="coordinate">坐标</param>
            <returns>块列表位置索引</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Collections.IntCollection.CoordinateCount">
            <summary>
            坐标总数
            </summary>
            <returns>总数</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Collections.IntCollection.ToArray">
            <summary>
            转化为整型数组
            </summary>
            <returns>整型数组</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Collections.IntCollection.ToString">
            <summary>
            重写object.ToString
            </summary>
            <returns>格式化字符串</returns>
        </member>
        <member name="T:PT.Toolkit.Portable.StringHelper">
            <summary>
            String类辅助功能
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.StringHelper.CalculateBytes(System.String)">
            <summary>
            计算unicode字符串的总字节数,汉字占两字节
            </summary>
            <param name="s">字符串</param>
            <returns>总字节数</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.StringHelper.DietStackTrace(System.String)">
            <summary>
            简化堆栈信息内容，节省空间
            </summary>
            <param name="StackTrace"></param>
            <returns></returns>
        </member>
        <member name="M:PT.Toolkit.Portable.StringHelper.GetDietString(System.String,System.String)">
            <summary>
            判断前一行是否包含当前行的一部分字符串
            </summary>
            <param name="sPrevLine"></param>
            <param name="sCurrentLine"></param>
            <returns></returns>
        </member>
        <member name="M:PT.Toolkit.Portable.StringHelper.ToByteArray(System.String)">
            <summary>
            字符串转换为byte数组
            </summary>
            <param name="sValue">字符串</param>
            <returns>byte数组</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.StringHelper.FromByteArray(System.Byte[])">
            <summary>
            ToByteArray的反向函数,byte数组转换为unicode字符串
            </summary>
            <param name="bytes">byte数组</param>
            <returns>字符串</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.StringHelper.ToBase64String(System.String)">
            <summary>
            将输入字符串转换为Base64编码格式的字符串,需要的存放空间增加一倍,用于某些对特殊字符敏感的情况
            </summary>
            <param name="sValue">字符串</param>
            <returns>Base64编码格式的字符串</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.StringHelper.FromBase64String(System.String)">
            <summary>
            ToBase64String的反向函数,将Base64编码格式的字符串转换为正常的字符串
            </summary>
            <param name="sValue">Base64编码格式的字符串</param>
            <returns>字符串</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.StringHelper.CutGuid(System.String,System.Int32)">
            <summary>
            将guid过滤掉'-'号,并截取指定长度返回,用于节省存储空间并且截短的ID足够满足应用不会产生冲突的场景
            </summary>
            <param name="sGuid">原GUID</param>
            <param name="len">要截取后返回的字符长度</param>
            <returns>截取后返回的短ID</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.StringHelper.CutGuid(System.Int32)">
            <summary>
            生成新的guid并过滤掉'-'号,并截取指定长度返回,用于节省存储空间并且截短的ID足够满足应用不会产生冲突的场景
            </summary>
            <param name="len">要截取后返回的字符长度</param>
            <returns>截取后返回的短ID</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.StringHelper.GenerateStringID(System.Int32,System.String)">
            <summary>
            生成指定长度字符串ID用于作为主键或唯一标记,长短可定制,默认字符串由大小写字母及0~9组成,其它字符可定制
            </summary>
            <param name="len">生成的字符串长度</param>
            <param name="allowedymbolChars">允许出现的字母和数字之外其他符号,如果为null则生成的字符串只包含数字和大小写字母</param>
            <returns>字符串ID</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.StringHelper.FormatPairs(System.Object[])">
            <summary>
            将传入数组每两个为一对组成名称-值对的显示格式输出，名称值间隔用等号分隔，每对的间隔用回车分隔
            </summary>
            <param name="pairs"></param>
            <returns>名称-值的格式串</returns>
        </member>
        <member name="T:PT.Toolkit.Portable.VersionHelper">
            <summary>
            版本号比较类
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.VersionHelper.GetNearestVersion(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            从列表中检索出距离当前版本最近的下一个版本
            </summary>
            <param name="currentVersion">当前版本</param>
            <param name="allVersions">可用版本列表</param>
            <returns>符合条件的版本号或null</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.VersionHelper.CompareVersion(System.String,System.String)">
            <summary>
            比较两个版本号 (-1:ver1小于ver2)(0:ver1等于ver2)(1:ver1大于ver2)
            </summary>
            <param name="ver1">版本号1</param>
            <param name="ver2">版本号2</param>
            <returns>(-1:ver1小于ver2)(0:ver1等于ver2)(1:ver1大于ver2)</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.VersionHelper.GetStringArrayIntegerByIndex(System.String[],System.Int32)">
            <summary>
            把数组的某个索引中的字符串转换成整数，无法转换的条件下返回0
            </summary>
            <param name="s">数组</param>
            <param name="idx">索引</param>
            <returns>转换成整数</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.VersionHelper.IsNumericOrDot(System.String)">
            <summary>
            判断是否全是数字或标点
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <!-- 对于成员“T:PT.Toolkit.Portable.Xml.BestXmlDeclaration”忽略有格式错误的 XML 注释 -->
        <member name="F:PT.Toolkit.Portable.Xml.BestXmlDeclaration.Encoding">
            <summary>
            摘要:获取或设置 XML 文档的编码级别。
            返回结果:
                有效的字符编码名称。受到最广泛支持的 XML 字符编码名称如下：类别编码名UnicodeUTF-8、UTF-16ISO 10646ISO-10646-UCS-2、ISO-10646-UCS-4ISO
                8859ISO-8859-n（其中“n”表示从 1 到 9 的数字）JIS X-0208-1997ISO-2022-JP、Shift_JIS、EUC-JP该值为可选值。如果未设置值，该属性将返回
                String.Empty。如果未包含编码属性，则在写出或保存文档时将假定为 UTF-8 编码。
            </summary>
        </member>
        <!-- 对于成员“F:PT.Toolkit.Portable.Xml.BestXmlDeclaration.Version”忽略有格式错误的 XML 注释 -->
        <member name="T:PT.Toolkit.Portable.Xml.BestXmlDocument">
            <summary>
            代表Xml文档信息
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Xml.BestXmlDocument.Declaration">
            <summary>
            XmlDeclaration
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Xml.BestXmlDocument.Nodes">
            <summary>
            XmlNodeList
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.Xml.BestXmlDocument.SelectNode(System.String,System.Boolean)">
            <summary>
            查找指定路径的节点
            </summary>
            <param name="nodePathName">节点路径</param>
            <param name="caseSensitive">是否区分大小写,为ture时效率较高</param>
            <returns>符合条件的节点,或null</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Xml.BestXmlDocument.SelectNodeAttribute(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            查找指定路径的节点的指定属性
            </summary>
            <param name="nodePathName"></param>
            <param name="attrName"></param>
            <param name="nodePathCaseSensitive">节点路径是否区分大小写,为ture时效率较高</param>
            <param name="attrNameCaseSensitive">属性名称是否区分大小写,为ture时效率较高</param>
            <returns>符合条件的属性,或null</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Xml.BestXmlDocument.PeekNodes(PT.Toolkit.Portable.Collections.Stack{System.Object})">
            <summary>
            确保获得栈顶对象的子节点列表
            </summary>
            <param name="stk"></param>
            <returns></returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Xml.BestXmlDocument.DocumentToString(PT.Toolkit.Portable.Xml.BestXmlDocument)">
            <summary>
            将一个XmlDocument以字符串形式输出
            </summary>
            <param name="doc">XmlDocument</param>
            <returns>字符串形式xml</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Xml.BestXmlDocument.WriteNodesRecurrence(PT.Toolkit.Portable.Xml.BestXmlNodeList,System.Xml.XmlWriter,System.Int32)">
            <summary>
            第归写节点
            </summary>
            <param name="nodes"></param>
            <param name="writer"></param>
        </member>
        <member name="M:PT.Toolkit.Portable.Xml.BestXmlDocument.CreateFromString(System.String)">
            <summary>
            从字符串信息中创建XmlDocument
            </summary>
            <param name="xmlString"></param>
            <returns></returns>
        </member>
        <!-- 对于成员“T:PT.Toolkit.Portable.Xml.BestXmlNode”忽略有格式错误的 XML 注释 -->
        <member name="F:PT.Toolkit.Portable.Xml.BestXmlNode.Nodes">
            <summary>
            子节点
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Xml.BestXmlNode.NodeType">
            <summary>
            节点类型
            </summary>
        </member>
        <!-- 对于成员“F:PT.Toolkit.Portable.Xml.BestXmlNode.IsEmptyElement”忽略有格式错误的 XML 注释 -->
        <member name="F:PT.Toolkit.Portable.Xml.BestXmlNode.Name">
            <summary>
            节点名称
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Xml.BestXmlNode.Attributes">
            <summary>
            节点属性列表
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Xml.BestXmlNode.Text">
            <summary>
            节点文本内容
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.Xml.BestXmlNode.SelectAttribute(System.String,System.Boolean)">
            <summary>
            查找指定路径的节点的指定属性
            </summary>
            <param name="attrName"></param>
            <param name="attrNameCaseSensitive">属性名称是否区分大小写,为ture时效率较高</param>
            <returns>符合条件的属性,或null</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Xml.BestXmlNode.#ctor(System.String)">
            <summary>
            带名称构造
            </summary>
            <param name="nodeName"></param>
        </member>
        <member name="M:PT.Toolkit.Portable.Xml.BestXmlNode.#ctor">
            <summary>
            无名称构造
            </summary>
        </member>
        <member name="T:PT.Toolkit.Portable.Xml.BestXmlNodeList">
            <summary>
            XmlNode 列表
            </summary>
        </member>
        <member name="M:PT.Toolkit.Portable.Xml.BestXmlNodeList.SelectNode(System.String,System.Boolean)">
            <summary>
            查找指定路径的节点
            </summary>
            <param name="nodePathName">节点路径</param>
            <param name="caseSensitive">是否区分大小写,为ture时效率较高</param>
            <returns>符合条件的节点,或null</returns>
        </member>
        <member name="M:PT.Toolkit.Portable.Xml.BestXmlNodeList.SelectNodeAttribute(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            查找指定路径的节点的指定属性
            </summary>
            <param name="nodePathName"></param>
            <param name="attrName"></param>
            <param name="nodePathCaseSensitive">节点路径是否区分大小写,为ture时效率较高</param>
            <param name="attrNameCaseSensitive">属性名称是否区分大小写,为ture时效率较高</param>
            <returns>符合条件的属性,或null</returns>
        </member>
        <member name="T:PT.Toolkit.Portable.Xml.BestXmlNodeTypeEnum">
            <summary>
            节点类型
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Xml.BestXmlNodeTypeEnum.Element">
            <summary>
            普通节点
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Xml.BestXmlNodeTypeEnum.CDATA">
            <summary>
            A CDATA section (for example, <![CDATA[my escaped text]]>)
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.Xml.BestXmlNodeTypeEnum.Comment">
            <summary>
            A comment (for example, <!-- my comment -->)
            </summary>
        </member>
        <!-- 对于成员“F:PT.Toolkit.Portable.Xml.BestXmlNodeTypeEnum.XmlDeclaration”忽略有格式错误的 XML 注释 -->
        <member name="T:PT.Toolkit.Portable.ThreadHelper">
            <summary>
            线程相关辅助功能
            </summary>
        </member>
        <member name="F:PT.Toolkit.Portable.ThreadHelper.UIContext">
            <summary>
            UI线程同步上下文,用户UI相关的上下文同步调用
            </summary>
        </member>
    </members>
</doc>
